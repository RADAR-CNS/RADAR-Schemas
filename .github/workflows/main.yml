# Continuous integration, including test and integration test
name: CI

# Run in master and dev branches and in all pull requests to those branches
on:
  push:
    branches: [ master, dev ]
  pull_request:
    branches: [ master, dev ]

env:
  DOCKER_IMAGE: radarbase/radar-schemas-tools

jobs:
  # Build and test the code
  java:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: java-sdk

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Cache
        uses: actions/cache@v2.0.0
        with:
          # Cache gradle directories
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          # Key for restoring and saving the cache
          key: ${{ runner.os }}-java-${{ hashFiles('**/*.gradle', 'java-sdk/gradle.properties') }}
          restore-keys: |
            ${{ runner.os }}-java-

      # Compile the code
      - name: Compile code
        run: ./gradlew assemble

      # Gradle check
      - name: Check
        run: ./gradlew check

      - name: Validate schemas
        run: ./gradlew :radar-schemas-tools:run --args="validate $GITHUB_WORKSPACE"

  docker:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('Dockerfile', 'java-sdk/**/*.gradle.kts', 'java-sdk/gradle.properties', 'java-sdk/*/src/main/**', 'commons/**', 'specifications/**', 'docker/**') }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Add Docker labels and tags
      - name: Docker meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v2
        with:
          images: ${{ env.DOCKER_IMAGE }}

      # Setup docker build environment
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build docker
        uses: docker/build-push-action@v2
        with:
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
          load: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          # Use runtime labels from docker_meta as well as fixed labels
          labels: |
            ${{ steps.docker_meta.outputs.labels }}
            maintainer=Joris Borgdorff <joris@thehyve.nl>, Yatharth Ranjan <yatharth.ranjan@kcl.ac.uk>, Pauline Conde <pauline.conde@kcl.ac.uk>
            org.opencontainers.image.description=RADAR-base schemas tools
            org.opencontainers.image.authors=Joris Borgdorff <joris@thehyve.nl>, Yatharth Ranjan <yatharth.ranjan@kcl.ac.uk>, Pauline Conde <pauline.conde@kcl.ac.uk>
            org.opencontainers.image.vendor=RADAR-base
            org.opencontainers.image.licenses=Apache-2.0

      - name: Inspect docker images
        run: docker image inspect ${{ env.DOCKER_IMAGE }}:${{ steps.docker_meta.outputs.version }}

      - name: Check docker image
        run: |
          docker run --rm ${{ env.DOCKER_IMAGE }}:${{ steps.docker_meta.outputs.version }} curl --version
          docker run --rm ${{ env.DOCKER_IMAGE }}:${{ steps.docker_meta.outputs.version }} radar-schemas-tools --help

      # Push the image on the dev and master branches
      - name: Push images
        if: ${{ github.event_name != 'pull_request' }}
        run: docker push ${{ env.DOCKER_IMAGE }}:${{ steps.docker_meta.outputs.version }}
