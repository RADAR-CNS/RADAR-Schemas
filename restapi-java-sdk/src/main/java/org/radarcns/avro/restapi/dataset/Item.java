/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.radarcns.avro.restapi.dataset;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** Dataset item. It contains a value and its related time. */
@org.apache.avro.specific.AvroGenerated
public class Item extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3417794839809906075L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Item\",\"namespace\":\"org.radarcns.avro.restapi.dataset\",\"doc\":\"Dataset item. It contains a value and its related time.\",\"fields\":[{\"name\":\"value\",\"type\":[{\"type\":\"record\",\"name\":\"HeartRate\",\"namespace\":\"org.radarcns.avro.restapi.sensor\",\"doc\":\"Heart Rate resulting from data aggregation. It is computed as (60 / ibi)\",\"fields\":[{\"name\":\"value\",\"type\":[\"double\",{\"type\":\"record\",\"name\":\"Quartiles\",\"namespace\":\"org.radarcns.avro.restapi.dataset\",\"doc\":\"List of quartiles\",\"fields\":[{\"name\":\"first\",\"type\":\"double\"},{\"name\":\"second\",\"type\":\"double\"},{\"name\":\"third\",\"type\":\"double\"}]}]}]},{\"type\":\"record\",\"name\":\"Acceleration\",\"namespace\":\"org.radarcns.avro.restapi.sensor\",\"doc\":\"Acceleration item for a dataset with gravitational constant g as unit.\",\"fields\":[{\"name\":\"x\",\"type\":[\"double\",\"org.radarcns.avro.restapi.dataset.Quartiles\"]},{\"name\":\"y\",\"type\":[\"double\",\"org.radarcns.avro.restapi.dataset.Quartiles\"]},{\"name\":\"z\",\"type\":[\"double\",\"org.radarcns.avro.restapi.dataset.Quartiles\"]}]},{\"type\":\"record\",\"name\":\"Battery\",\"namespace\":\"org.radarcns.avro.restapi.sensor\",\"doc\":\"The battery level resulting from the data aggregation. It is a double value between 0 and 1\",\"fields\":[{\"name\":\"value\",\"type\":[\"double\",\"org.radarcns.avro.restapi.dataset.Quartiles\"]}]},{\"type\":\"record\",\"name\":\"BloodVolumePulse\",\"namespace\":\"org.radarcns.avro.restapi.sensor\",\"doc\":\"Data from photoplethysmograph expressed in light absorption (nW)\",\"fields\":[{\"name\":\"value\",\"type\":[\"double\",\"org.radarcns.avro.restapi.dataset.Quartiles\"]}]},{\"type\":\"record\",\"name\":\"ElectroDermalActivity\",\"namespace\":\"org.radarcns.avro.restapi.sensor\",\"doc\":\"Aggregated data representing electrodermal activity expressed as microsiemens (µS)\",\"fields\":[{\"name\":\"value\",\"type\":[\"double\",\"org.radarcns.avro.restapi.dataset.Quartiles\"]}]},{\"type\":\"record\",\"name\":\"InterBeatInterval\",\"namespace\":\"org.radarcns.avro.restapi.sensor\",\"doc\":\"Time between individuals heart beats\",\"fields\":[{\"name\":\"value\",\"type\":[\"double\",\"org.radarcns.avro.restapi.dataset.Quartiles\"]}]},{\"type\":\"record\",\"name\":\"Temperature\",\"namespace\":\"org.radarcns.avro.restapi.sensor\",\"doc\":\"Temperature value expressed in Celsius (°C) scale\",\"fields\":[{\"name\":\"value\",\"type\":[\"double\",\"org.radarcns.avro.restapi.dataset.Quartiles\"]}]}]},{\"name\":\"effectiveTimeFrame\",\"type\":{\"type\":\"record\",\"name\":\"EffectiveTimeFrame\",\"namespace\":\"org.radarcns.avro.restapi.header\",\"doc\":\"Time window\",\"fields\":[{\"name\":\"startDateTime\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"It is a point in time (ISO8601) with UTC timezone.\"},{\"name\":\"endDateTime\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"It is a point in time (ISO8601) with UTC timezone.\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.Object value;
  @Deprecated public org.radarcns.avro.restapi.header.EffectiveTimeFrame effectiveTimeFrame;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Item() {}

  /**
   * All-args constructor.
   * @param value The new value for value
   * @param effectiveTimeFrame The new value for effectiveTimeFrame
   */
  public Item(java.lang.Object value, org.radarcns.avro.restapi.header.EffectiveTimeFrame effectiveTimeFrame) {
    this.value = value;
    this.effectiveTimeFrame = effectiveTimeFrame;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return value;
    case 1: return effectiveTimeFrame;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: value = (java.lang.Object)value$; break;
    case 1: effectiveTimeFrame = (org.radarcns.avro.restapi.header.EffectiveTimeFrame)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'value' field.
   * @return The value of the 'value' field.
   */
  public java.lang.Object getValue() {
    return value;
  }

  /**
   * Sets the value of the 'value' field.
   * @param value the value to set.
   */
  public void setValue(java.lang.Object value) {
    this.value = value;
  }

  /**
   * Gets the value of the 'effectiveTimeFrame' field.
   * @return The value of the 'effectiveTimeFrame' field.
   */
  public org.radarcns.avro.restapi.header.EffectiveTimeFrame getEffectiveTimeFrame() {
    return effectiveTimeFrame;
  }

  /**
   * Sets the value of the 'effectiveTimeFrame' field.
   * @param value the value to set.
   */
  public void setEffectiveTimeFrame(org.radarcns.avro.restapi.header.EffectiveTimeFrame value) {
    this.effectiveTimeFrame = value;
  }

  /**
   * Creates a new Item RecordBuilder.
   * @return A new Item RecordBuilder
   */
  public static org.radarcns.avro.restapi.dataset.Item.Builder newBuilder() {
    return new org.radarcns.avro.restapi.dataset.Item.Builder();
  }

  /**
   * Creates a new Item RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Item RecordBuilder
   */
  public static org.radarcns.avro.restapi.dataset.Item.Builder newBuilder(org.radarcns.avro.restapi.dataset.Item.Builder other) {
    return new org.radarcns.avro.restapi.dataset.Item.Builder(other);
  }

  /**
   * Creates a new Item RecordBuilder by copying an existing Item instance.
   * @param other The existing instance to copy.
   * @return A new Item RecordBuilder
   */
  public static org.radarcns.avro.restapi.dataset.Item.Builder newBuilder(org.radarcns.avro.restapi.dataset.Item other) {
    return new org.radarcns.avro.restapi.dataset.Item.Builder(other);
  }

  /**
   * RecordBuilder for Item instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Item>
    implements org.apache.avro.data.RecordBuilder<Item> {

    private java.lang.Object value;
    private org.radarcns.avro.restapi.header.EffectiveTimeFrame effectiveTimeFrame;
    private org.radarcns.avro.restapi.header.EffectiveTimeFrame.Builder effectiveTimeFrameBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.radarcns.avro.restapi.dataset.Item.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.value)) {
        this.value = data().deepCopy(fields()[0].schema(), other.value);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.effectiveTimeFrame)) {
        this.effectiveTimeFrame = data().deepCopy(fields()[1].schema(), other.effectiveTimeFrame);
        fieldSetFlags()[1] = true;
      }
      if (other.hasEffectiveTimeFrameBuilder()) {
        this.effectiveTimeFrameBuilder = org.radarcns.avro.restapi.header.EffectiveTimeFrame.newBuilder(other.getEffectiveTimeFrameBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Item instance
     * @param other The existing instance to copy.
     */
    private Builder(org.radarcns.avro.restapi.dataset.Item other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.value)) {
        this.value = data().deepCopy(fields()[0].schema(), other.value);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.effectiveTimeFrame)) {
        this.effectiveTimeFrame = data().deepCopy(fields()[1].schema(), other.effectiveTimeFrame);
        fieldSetFlags()[1] = true;
      }
      this.effectiveTimeFrameBuilder = null;
    }

    /**
      * Gets the value of the 'value' field.
      * @return The value.
      */
    public java.lang.Object getValue() {
      return value;
    }

    /**
      * Sets the value of the 'value' field.
      * @param value The value of 'value'.
      * @return This builder.
      */
    public org.radarcns.avro.restapi.dataset.Item.Builder setValue(java.lang.Object value) {
      validate(fields()[0], value);
      this.value = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'value' field.
      * @return This builder.
      */
    public org.radarcns.avro.restapi.dataset.Item.Builder clearValue() {
      value = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'effectiveTimeFrame' field.
      * @return The value.
      */
    public org.radarcns.avro.restapi.header.EffectiveTimeFrame getEffectiveTimeFrame() {
      return effectiveTimeFrame;
    }

    /**
      * Sets the value of the 'effectiveTimeFrame' field.
      * @param value The value of 'effectiveTimeFrame'.
      * @return This builder.
      */
    public org.radarcns.avro.restapi.dataset.Item.Builder setEffectiveTimeFrame(org.radarcns.avro.restapi.header.EffectiveTimeFrame value) {
      validate(fields()[1], value);
      this.effectiveTimeFrameBuilder = null;
      this.effectiveTimeFrame = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'effectiveTimeFrame' field has been set.
      * @return True if the 'effectiveTimeFrame' field has been set, false otherwise.
      */
    public boolean hasEffectiveTimeFrame() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'effectiveTimeFrame' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public org.radarcns.avro.restapi.header.EffectiveTimeFrame.Builder getEffectiveTimeFrameBuilder() {
      if (effectiveTimeFrameBuilder == null) {
        if (hasEffectiveTimeFrame()) {
          setEffectiveTimeFrameBuilder(org.radarcns.avro.restapi.header.EffectiveTimeFrame.newBuilder(effectiveTimeFrame));
        } else {
          setEffectiveTimeFrameBuilder(org.radarcns.avro.restapi.header.EffectiveTimeFrame.newBuilder());
        }
      }
      return effectiveTimeFrameBuilder;
    }

    /**
     * Sets the Builder instance for the 'effectiveTimeFrame' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public org.radarcns.avro.restapi.dataset.Item.Builder setEffectiveTimeFrameBuilder(org.radarcns.avro.restapi.header.EffectiveTimeFrame.Builder value) {
      clearEffectiveTimeFrame();
      effectiveTimeFrameBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'effectiveTimeFrame' field has an active Builder instance
     * @return True if the 'effectiveTimeFrame' field has an active Builder instance
     */
    public boolean hasEffectiveTimeFrameBuilder() {
      return effectiveTimeFrameBuilder != null;
    }

    /**
      * Clears the value of the 'effectiveTimeFrame' field.
      * @return This builder.
      */
    public org.radarcns.avro.restapi.dataset.Item.Builder clearEffectiveTimeFrame() {
      effectiveTimeFrame = null;
      effectiveTimeFrameBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public Item build() {
      try {
        Item record = new Item();
        record.value = fieldSetFlags()[0] ? this.value : (java.lang.Object) defaultValue(fields()[0]);
        if (effectiveTimeFrameBuilder != null) {
          record.effectiveTimeFrame = this.effectiveTimeFrameBuilder.build();
        } else {
          record.effectiveTimeFrame = fieldSetFlags()[1] ? this.effectiveTimeFrame : (org.radarcns.avro.restapi.header.EffectiveTimeFrame) defaultValue(fields()[1]);
        }
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
