/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.radarcns.avro.restapi.header;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** Time window */
@org.apache.avro.specific.AvroGenerated
public class EffectiveTimeFrame extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1687969000932100768L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EffectiveTimeFrame\",\"namespace\":\"org.radarcns.avro.restapi.header\",\"doc\":\"Time window\",\"fields\":[{\"name\":\"startDateTime\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"It is a point in time (ISO8601) with UTC timezone.\"},{\"name\":\"endDateTime\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"It is a point in time (ISO8601) with UTC timezone.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** It is a point in time (ISO8601) with UTC timezone. */
  @Deprecated public java.lang.String startDateTime;
  /** It is a point in time (ISO8601) with UTC timezone. */
  @Deprecated public java.lang.String endDateTime;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EffectiveTimeFrame() {}

  /**
   * All-args constructor.
   * @param startDateTime It is a point in time (ISO8601) with UTC timezone.
   * @param endDateTime It is a point in time (ISO8601) with UTC timezone.
   */
  public EffectiveTimeFrame(java.lang.String startDateTime, java.lang.String endDateTime) {
    this.startDateTime = startDateTime;
    this.endDateTime = endDateTime;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return startDateTime;
    case 1: return endDateTime;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: startDateTime = (java.lang.String)value$; break;
    case 1: endDateTime = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'startDateTime' field.
   * @return It is a point in time (ISO8601) with UTC timezone.
   */
  public java.lang.String getStartDateTime() {
    return startDateTime;
  }

  /**
   * Sets the value of the 'startDateTime' field.
   * It is a point in time (ISO8601) with UTC timezone.
   * @param value the value to set.
   */
  public void setStartDateTime(java.lang.String value) {
    this.startDateTime = value;
  }

  /**
   * Gets the value of the 'endDateTime' field.
   * @return It is a point in time (ISO8601) with UTC timezone.
   */
  public java.lang.String getEndDateTime() {
    return endDateTime;
  }

  /**
   * Sets the value of the 'endDateTime' field.
   * It is a point in time (ISO8601) with UTC timezone.
   * @param value the value to set.
   */
  public void setEndDateTime(java.lang.String value) {
    this.endDateTime = value;
  }

  /**
   * Creates a new EffectiveTimeFrame RecordBuilder.
   * @return A new EffectiveTimeFrame RecordBuilder
   */
  public static org.radarcns.avro.restapi.header.EffectiveTimeFrame.Builder newBuilder() {
    return new org.radarcns.avro.restapi.header.EffectiveTimeFrame.Builder();
  }

  /**
   * Creates a new EffectiveTimeFrame RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EffectiveTimeFrame RecordBuilder
   */
  public static org.radarcns.avro.restapi.header.EffectiveTimeFrame.Builder newBuilder(org.radarcns.avro.restapi.header.EffectiveTimeFrame.Builder other) {
    return new org.radarcns.avro.restapi.header.EffectiveTimeFrame.Builder(other);
  }

  /**
   * Creates a new EffectiveTimeFrame RecordBuilder by copying an existing EffectiveTimeFrame instance.
   * @param other The existing instance to copy.
   * @return A new EffectiveTimeFrame RecordBuilder
   */
  public static org.radarcns.avro.restapi.header.EffectiveTimeFrame.Builder newBuilder(org.radarcns.avro.restapi.header.EffectiveTimeFrame other) {
    return new org.radarcns.avro.restapi.header.EffectiveTimeFrame.Builder(other);
  }

  /**
   * RecordBuilder for EffectiveTimeFrame instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EffectiveTimeFrame>
    implements org.apache.avro.data.RecordBuilder<EffectiveTimeFrame> {

    /** It is a point in time (ISO8601) with UTC timezone. */
    private java.lang.String startDateTime;
    /** It is a point in time (ISO8601) with UTC timezone. */
    private java.lang.String endDateTime;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.radarcns.avro.restapi.header.EffectiveTimeFrame.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.startDateTime)) {
        this.startDateTime = data().deepCopy(fields()[0].schema(), other.startDateTime);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.endDateTime)) {
        this.endDateTime = data().deepCopy(fields()[1].schema(), other.endDateTime);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing EffectiveTimeFrame instance
     * @param other The existing instance to copy.
     */
    private Builder(org.radarcns.avro.restapi.header.EffectiveTimeFrame other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.startDateTime)) {
        this.startDateTime = data().deepCopy(fields()[0].schema(), other.startDateTime);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.endDateTime)) {
        this.endDateTime = data().deepCopy(fields()[1].schema(), other.endDateTime);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'startDateTime' field.
      * It is a point in time (ISO8601) with UTC timezone.
      * @return The value.
      */
    public java.lang.String getStartDateTime() {
      return startDateTime;
    }

    /**
      * Sets the value of the 'startDateTime' field.
      * It is a point in time (ISO8601) with UTC timezone.
      * @param value The value of 'startDateTime'.
      * @return This builder.
      */
    public org.radarcns.avro.restapi.header.EffectiveTimeFrame.Builder setStartDateTime(java.lang.String value) {
      validate(fields()[0], value);
      this.startDateTime = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'startDateTime' field has been set.
      * It is a point in time (ISO8601) with UTC timezone.
      * @return True if the 'startDateTime' field has been set, false otherwise.
      */
    public boolean hasStartDateTime() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'startDateTime' field.
      * It is a point in time (ISO8601) with UTC timezone.
      * @return This builder.
      */
    public org.radarcns.avro.restapi.header.EffectiveTimeFrame.Builder clearStartDateTime() {
      startDateTime = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'endDateTime' field.
      * It is a point in time (ISO8601) with UTC timezone.
      * @return The value.
      */
    public java.lang.String getEndDateTime() {
      return endDateTime;
    }

    /**
      * Sets the value of the 'endDateTime' field.
      * It is a point in time (ISO8601) with UTC timezone.
      * @param value The value of 'endDateTime'.
      * @return This builder.
      */
    public org.radarcns.avro.restapi.header.EffectiveTimeFrame.Builder setEndDateTime(java.lang.String value) {
      validate(fields()[1], value);
      this.endDateTime = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'endDateTime' field has been set.
      * It is a point in time (ISO8601) with UTC timezone.
      * @return True if the 'endDateTime' field has been set, false otherwise.
      */
    public boolean hasEndDateTime() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'endDateTime' field.
      * It is a point in time (ISO8601) with UTC timezone.
      * @return This builder.
      */
    public org.radarcns.avro.restapi.header.EffectiveTimeFrame.Builder clearEndDateTime() {
      endDateTime = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public EffectiveTimeFrame build() {
      try {
        EffectiveTimeFrame record = new EffectiveTimeFrame();
        record.startDateTime = fieldSetFlags()[0] ? this.startDateTime : (java.lang.String) defaultValue(fields()[0]);
        record.endDateTime = fieldSetFlags()[1] ? this.endDateTime : (java.lang.String) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
