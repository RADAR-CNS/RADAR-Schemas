/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.radarcns.avro.restapi.dataset;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** List of quartiles */
@org.apache.avro.specific.AvroGenerated
public class Quartiles extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 814427584527410501L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Quartiles\",\"namespace\":\"org.radarcns.avro.restapi.dataset\",\"doc\":\"List of quartiles\",\"fields\":[{\"name\":\"first\",\"type\":\"double\"},{\"name\":\"second\",\"type\":\"double\"},{\"name\":\"third\",\"type\":\"double\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public double first;
  @Deprecated public double second;
  @Deprecated public double third;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Quartiles() {}

  /**
   * All-args constructor.
   * @param first The new value for first
   * @param second The new value for second
   * @param third The new value for third
   */
  public Quartiles(java.lang.Double first, java.lang.Double second, java.lang.Double third) {
    this.first = first;
    this.second = second;
    this.third = third;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return first;
    case 1: return second;
    case 2: return third;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: first = (java.lang.Double)value$; break;
    case 1: second = (java.lang.Double)value$; break;
    case 2: third = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'first' field.
   * @return The value of the 'first' field.
   */
  public java.lang.Double getFirst() {
    return first;
  }

  /**
   * Sets the value of the 'first' field.
   * @param value the value to set.
   */
  public void setFirst(java.lang.Double value) {
    this.first = value;
  }

  /**
   * Gets the value of the 'second' field.
   * @return The value of the 'second' field.
   */
  public java.lang.Double getSecond() {
    return second;
  }

  /**
   * Sets the value of the 'second' field.
   * @param value the value to set.
   */
  public void setSecond(java.lang.Double value) {
    this.second = value;
  }

  /**
   * Gets the value of the 'third' field.
   * @return The value of the 'third' field.
   */
  public java.lang.Double getThird() {
    return third;
  }

  /**
   * Sets the value of the 'third' field.
   * @param value the value to set.
   */
  public void setThird(java.lang.Double value) {
    this.third = value;
  }

  /**
   * Creates a new Quartiles RecordBuilder.
   * @return A new Quartiles RecordBuilder
   */
  public static org.radarcns.avro.restapi.dataset.Quartiles.Builder newBuilder() {
    return new org.radarcns.avro.restapi.dataset.Quartiles.Builder();
  }

  /**
   * Creates a new Quartiles RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Quartiles RecordBuilder
   */
  public static org.radarcns.avro.restapi.dataset.Quartiles.Builder newBuilder(org.radarcns.avro.restapi.dataset.Quartiles.Builder other) {
    return new org.radarcns.avro.restapi.dataset.Quartiles.Builder(other);
  }

  /**
   * Creates a new Quartiles RecordBuilder by copying an existing Quartiles instance.
   * @param other The existing instance to copy.
   * @return A new Quartiles RecordBuilder
   */
  public static org.radarcns.avro.restapi.dataset.Quartiles.Builder newBuilder(org.radarcns.avro.restapi.dataset.Quartiles other) {
    return new org.radarcns.avro.restapi.dataset.Quartiles.Builder(other);
  }

  /**
   * RecordBuilder for Quartiles instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Quartiles>
    implements org.apache.avro.data.RecordBuilder<Quartiles> {

    private double first;
    private double second;
    private double third;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.radarcns.avro.restapi.dataset.Quartiles.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.first)) {
        this.first = data().deepCopy(fields()[0].schema(), other.first);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.second)) {
        this.second = data().deepCopy(fields()[1].schema(), other.second);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.third)) {
        this.third = data().deepCopy(fields()[2].schema(), other.third);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Quartiles instance
     * @param other The existing instance to copy.
     */
    private Builder(org.radarcns.avro.restapi.dataset.Quartiles other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.first)) {
        this.first = data().deepCopy(fields()[0].schema(), other.first);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.second)) {
        this.second = data().deepCopy(fields()[1].schema(), other.second);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.third)) {
        this.third = data().deepCopy(fields()[2].schema(), other.third);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'first' field.
      * @return The value.
      */
    public java.lang.Double getFirst() {
      return first;
    }

    /**
      * Sets the value of the 'first' field.
      * @param value The value of 'first'.
      * @return This builder.
      */
    public org.radarcns.avro.restapi.dataset.Quartiles.Builder setFirst(double value) {
      validate(fields()[0], value);
      this.first = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'first' field has been set.
      * @return True if the 'first' field has been set, false otherwise.
      */
    public boolean hasFirst() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'first' field.
      * @return This builder.
      */
    public org.radarcns.avro.restapi.dataset.Quartiles.Builder clearFirst() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'second' field.
      * @return The value.
      */
    public java.lang.Double getSecond() {
      return second;
    }

    /**
      * Sets the value of the 'second' field.
      * @param value The value of 'second'.
      * @return This builder.
      */
    public org.radarcns.avro.restapi.dataset.Quartiles.Builder setSecond(double value) {
      validate(fields()[1], value);
      this.second = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'second' field has been set.
      * @return True if the 'second' field has been set, false otherwise.
      */
    public boolean hasSecond() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'second' field.
      * @return This builder.
      */
    public org.radarcns.avro.restapi.dataset.Quartiles.Builder clearSecond() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'third' field.
      * @return The value.
      */
    public java.lang.Double getThird() {
      return third;
    }

    /**
      * Sets the value of the 'third' field.
      * @param value The value of 'third'.
      * @return This builder.
      */
    public org.radarcns.avro.restapi.dataset.Quartiles.Builder setThird(double value) {
      validate(fields()[2], value);
      this.third = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'third' field has been set.
      * @return True if the 'third' field has been set, false otherwise.
      */
    public boolean hasThird() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'third' field.
      * @return This builder.
      */
    public org.radarcns.avro.restapi.dataset.Quartiles.Builder clearThird() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public Quartiles build() {
      try {
        Quartiles record = new Quartiles();
        record.first = fieldSetFlags()[0] ? this.first : (java.lang.Double) defaultValue(fields()[0]);
        record.second = fieldSetFlags()[1] ? this.second : (java.lang.Double) defaultValue(fields()[1]);
        record.third = fieldSetFlags()[2] ? this.third : (java.lang.Double) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
