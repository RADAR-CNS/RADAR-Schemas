/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.radarcns.avro.restapi.sensor;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** Sensor specification */
@org.apache.avro.specific.AvroGenerated
public class SensorSpecification extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7983423989368313775L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SensorSpecification\",\"namespace\":\"org.radarcns.avro.restapi.sensor\",\"doc\":\"Sensor specification\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"enum\",\"name\":\"SensorType\",\"doc\":\"Set of sensor type\",\"symbols\":[\"ACCELEROMETER\",\"BATTERY\",\"BLOOD_VOLUME_PULSE\",\"ELECTRODERMAL_ACTIVITY\",\"INTER_BEAT_INTERVAL\",\"HEART_RATE\",\"THERMOMETER\"]},\"doc\":\"Sensor name\"},{\"name\":\"dataType\",\"type\":{\"type\":\"enum\",\"name\":\"DataType\",\"doc\":\"States if the value is provided directly by a sensor or it is computed. Any value different from RAW states who computes the value.\",\"symbols\":[\"RAW\",\"VENDOR\",\"RADAR\"]},\"doc\":\"Explains if the values is a raw data, otherwise it reports who computes it\"},{\"name\":\"frequency\",\"type\":\"double\",\"doc\":\"Number of expected samples per second\",\"default\":-1.0},{\"name\":\"unit\",\"type\":{\"type\":\"enum\",\"name\":\"Unit\",\"doc\":\"Set of measurement units\",\"symbols\":[\"BEATS_PER_MIN\",\"CELSIUS\",\"DIMENSIONLESS\",\"G\",\"MICROSIEMENS\",\"SECOND\",\"NANOWATT\",\"PERCENTAGE\"]},\"doc\":\"Measurement unit used by the sensor\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Sensor name */
  @Deprecated public org.radarcns.avro.restapi.sensor.SensorType name;
  /** Explains if the values is a raw data, otherwise it reports who computes it */
  @Deprecated public org.radarcns.avro.restapi.sensor.DataType dataType;
  /** Number of expected samples per second */
  @Deprecated public double frequency;
  /** Measurement unit used by the sensor */
  @Deprecated public org.radarcns.avro.restapi.sensor.Unit unit;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SensorSpecification() {}

  /**
   * All-args constructor.
   * @param name Sensor name
   * @param dataType Explains if the values is a raw data, otherwise it reports who computes it
   * @param frequency Number of expected samples per second
   * @param unit Measurement unit used by the sensor
   */
  public SensorSpecification(org.radarcns.avro.restapi.sensor.SensorType name, org.radarcns.avro.restapi.sensor.DataType dataType, java.lang.Double frequency, org.radarcns.avro.restapi.sensor.Unit unit) {
    this.name = name;
    this.dataType = dataType;
    this.frequency = frequency;
    this.unit = unit;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return dataType;
    case 2: return frequency;
    case 3: return unit;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (org.radarcns.avro.restapi.sensor.SensorType)value$; break;
    case 1: dataType = (org.radarcns.avro.restapi.sensor.DataType)value$; break;
    case 2: frequency = (java.lang.Double)value$; break;
    case 3: unit = (org.radarcns.avro.restapi.sensor.Unit)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   * @return Sensor name
   */
  public org.radarcns.avro.restapi.sensor.SensorType getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * Sensor name
   * @param value the value to set.
   */
  public void setName(org.radarcns.avro.restapi.sensor.SensorType value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'dataType' field.
   * @return Explains if the values is a raw data, otherwise it reports who computes it
   */
  public org.radarcns.avro.restapi.sensor.DataType getDataType() {
    return dataType;
  }

  /**
   * Sets the value of the 'dataType' field.
   * Explains if the values is a raw data, otherwise it reports who computes it
   * @param value the value to set.
   */
  public void setDataType(org.radarcns.avro.restapi.sensor.DataType value) {
    this.dataType = value;
  }

  /**
   * Gets the value of the 'frequency' field.
   * @return Number of expected samples per second
   */
  public java.lang.Double getFrequency() {
    return frequency;
  }

  /**
   * Sets the value of the 'frequency' field.
   * Number of expected samples per second
   * @param value the value to set.
   */
  public void setFrequency(java.lang.Double value) {
    this.frequency = value;
  }

  /**
   * Gets the value of the 'unit' field.
   * @return Measurement unit used by the sensor
   */
  public org.radarcns.avro.restapi.sensor.Unit getUnit() {
    return unit;
  }

  /**
   * Sets the value of the 'unit' field.
   * Measurement unit used by the sensor
   * @param value the value to set.
   */
  public void setUnit(org.radarcns.avro.restapi.sensor.Unit value) {
    this.unit = value;
  }

  /**
   * Creates a new SensorSpecification RecordBuilder.
   * @return A new SensorSpecification RecordBuilder
   */
  public static org.radarcns.avro.restapi.sensor.SensorSpecification.Builder newBuilder() {
    return new org.radarcns.avro.restapi.sensor.SensorSpecification.Builder();
  }

  /**
   * Creates a new SensorSpecification RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SensorSpecification RecordBuilder
   */
  public static org.radarcns.avro.restapi.sensor.SensorSpecification.Builder newBuilder(org.radarcns.avro.restapi.sensor.SensorSpecification.Builder other) {
    return new org.radarcns.avro.restapi.sensor.SensorSpecification.Builder(other);
  }

  /**
   * Creates a new SensorSpecification RecordBuilder by copying an existing SensorSpecification instance.
   * @param other The existing instance to copy.
   * @return A new SensorSpecification RecordBuilder
   */
  public static org.radarcns.avro.restapi.sensor.SensorSpecification.Builder newBuilder(org.radarcns.avro.restapi.sensor.SensorSpecification other) {
    return new org.radarcns.avro.restapi.sensor.SensorSpecification.Builder(other);
  }

  /**
   * RecordBuilder for SensorSpecification instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SensorSpecification>
    implements org.apache.avro.data.RecordBuilder<SensorSpecification> {

    /** Sensor name */
    private org.radarcns.avro.restapi.sensor.SensorType name;
    /** Explains if the values is a raw data, otherwise it reports who computes it */
    private org.radarcns.avro.restapi.sensor.DataType dataType;
    /** Number of expected samples per second */
    private double frequency;
    /** Measurement unit used by the sensor */
    private org.radarcns.avro.restapi.sensor.Unit unit;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.radarcns.avro.restapi.sensor.SensorSpecification.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.dataType)) {
        this.dataType = data().deepCopy(fields()[1].schema(), other.dataType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.frequency)) {
        this.frequency = data().deepCopy(fields()[2].schema(), other.frequency);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.unit)) {
        this.unit = data().deepCopy(fields()[3].schema(), other.unit);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing SensorSpecification instance
     * @param other The existing instance to copy.
     */
    private Builder(org.radarcns.avro.restapi.sensor.SensorSpecification other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.dataType)) {
        this.dataType = data().deepCopy(fields()[1].schema(), other.dataType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.frequency)) {
        this.frequency = data().deepCopy(fields()[2].schema(), other.frequency);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.unit)) {
        this.unit = data().deepCopy(fields()[3].schema(), other.unit);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'name' field.
      * Sensor name
      * @return The value.
      */
    public org.radarcns.avro.restapi.sensor.SensorType getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * Sensor name
      * @param value The value of 'name'.
      * @return This builder.
      */
    public org.radarcns.avro.restapi.sensor.SensorSpecification.Builder setName(org.radarcns.avro.restapi.sensor.SensorType value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * Sensor name
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'name' field.
      * Sensor name
      * @return This builder.
      */
    public org.radarcns.avro.restapi.sensor.SensorSpecification.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'dataType' field.
      * Explains if the values is a raw data, otherwise it reports who computes it
      * @return The value.
      */
    public org.radarcns.avro.restapi.sensor.DataType getDataType() {
      return dataType;
    }

    /**
      * Sets the value of the 'dataType' field.
      * Explains if the values is a raw data, otherwise it reports who computes it
      * @param value The value of 'dataType'.
      * @return This builder.
      */
    public org.radarcns.avro.restapi.sensor.SensorSpecification.Builder setDataType(org.radarcns.avro.restapi.sensor.DataType value) {
      validate(fields()[1], value);
      this.dataType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'dataType' field has been set.
      * Explains if the values is a raw data, otherwise it reports who computes it
      * @return True if the 'dataType' field has been set, false otherwise.
      */
    public boolean hasDataType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'dataType' field.
      * Explains if the values is a raw data, otherwise it reports who computes it
      * @return This builder.
      */
    public org.radarcns.avro.restapi.sensor.SensorSpecification.Builder clearDataType() {
      dataType = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'frequency' field.
      * Number of expected samples per second
      * @return The value.
      */
    public java.lang.Double getFrequency() {
      return frequency;
    }

    /**
      * Sets the value of the 'frequency' field.
      * Number of expected samples per second
      * @param value The value of 'frequency'.
      * @return This builder.
      */
    public org.radarcns.avro.restapi.sensor.SensorSpecification.Builder setFrequency(double value) {
      validate(fields()[2], value);
      this.frequency = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'frequency' field has been set.
      * Number of expected samples per second
      * @return True if the 'frequency' field has been set, false otherwise.
      */
    public boolean hasFrequency() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'frequency' field.
      * Number of expected samples per second
      * @return This builder.
      */
    public org.radarcns.avro.restapi.sensor.SensorSpecification.Builder clearFrequency() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'unit' field.
      * Measurement unit used by the sensor
      * @return The value.
      */
    public org.radarcns.avro.restapi.sensor.Unit getUnit() {
      return unit;
    }

    /**
      * Sets the value of the 'unit' field.
      * Measurement unit used by the sensor
      * @param value The value of 'unit'.
      * @return This builder.
      */
    public org.radarcns.avro.restapi.sensor.SensorSpecification.Builder setUnit(org.radarcns.avro.restapi.sensor.Unit value) {
      validate(fields()[3], value);
      this.unit = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'unit' field has been set.
      * Measurement unit used by the sensor
      * @return True if the 'unit' field has been set, false otherwise.
      */
    public boolean hasUnit() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'unit' field.
      * Measurement unit used by the sensor
      * @return This builder.
      */
    public org.radarcns.avro.restapi.sensor.SensorSpecification.Builder clearUnit() {
      unit = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public SensorSpecification build() {
      try {
        SensorSpecification record = new SensorSpecification();
        record.name = fieldSetFlags()[0] ? this.name : (org.radarcns.avro.restapi.sensor.SensorType) defaultValue(fields()[0]);
        record.dataType = fieldSetFlags()[1] ? this.dataType : (org.radarcns.avro.restapi.sensor.DataType) defaultValue(fields()[1]);
        record.frequency = fieldSetFlags()[2] ? this.frequency : (java.lang.Double) defaultValue(fields()[2]);
        record.unit = fieldSetFlags()[3] ? this.unit : (org.radarcns.avro.restapi.sensor.Unit) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
