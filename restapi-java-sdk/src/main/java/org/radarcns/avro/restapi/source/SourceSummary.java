/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.radarcns.avro.restapi.source;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** Details about the source with details for each sensor */
@org.apache.avro.specific.AvroGenerated
public class SourceSummary extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7604203220101308222L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SourceSummary\",\"namespace\":\"org.radarcns.avro.restapi.source\",\"doc\":\"Details about the source with details for each sensor\",\"fields\":[{\"name\":\"state\",\"type\":{\"type\":\"enum\",\"name\":\"State\",\"doc\":\"Set of device status\",\"symbols\":[\"FINE\",\"OK\",\"WARNING\",\"DISCONNECTED\",\"UNKNOWN\"]},\"doc\":\"Current source state computed using the received data\",\"default\":\"UNKNOWN\"},{\"name\":\"receivedMessage\",\"type\":\"int\",\"doc\":\"Amount of received messages\",\"default\":-1},{\"name\":\"messageLoss\",\"type\":\"double\",\"doc\":\"Percentage of lost messages\",\"default\":-1.0},{\"name\":\"sensors\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"record\",\"name\":\"Sensor\",\"namespace\":\"org.radarcns.avro.restapi.sensor\",\"doc\":\"Sensor details\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"enum\",\"name\":\"SensorType\",\"doc\":\"Set of sensor type\",\"symbols\":[\"ACCELEROMETER\",\"BATTERY\",\"BLOOD_VOLUME_PULSE\",\"ELECTRODERMAL_ACTIVITY\",\"INTER_BEAT_INTERVAL\",\"HEART_RATE\",\"THERMOMETER\"]},\"doc\":\"Sensor name\"},{\"name\":\"state\",\"type\":\"org.radarcns.avro.restapi.source.State\",\"doc\":\"Current sensor state computed using the received data\",\"default\":\"UNKNOWN\"},{\"name\":\"receivedMessage\",\"type\":\"int\",\"doc\":\"Amount of received messages\",\"default\":-1},{\"name\":\"messageLoss\",\"type\":\"double\",\"doc\":\"Percentage of lost messages\",\"default\":-1.0}]},\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Current source state computed using the received data */
  @Deprecated public org.radarcns.avro.restapi.source.State state;
  /** Amount of received messages */
  @Deprecated public int receivedMessage;
  /** Percentage of lost messages */
  @Deprecated public double messageLoss;
  @Deprecated public java.util.Map<java.lang.String,org.radarcns.avro.restapi.sensor.Sensor> sensors;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SourceSummary() {}

  /**
   * All-args constructor.
   * @param state Current source state computed using the received data
   * @param receivedMessage Amount of received messages
   * @param messageLoss Percentage of lost messages
   * @param sensors The new value for sensors
   */
  public SourceSummary(org.radarcns.avro.restapi.source.State state, java.lang.Integer receivedMessage, java.lang.Double messageLoss, java.util.Map<java.lang.String,org.radarcns.avro.restapi.sensor.Sensor> sensors) {
    this.state = state;
    this.receivedMessage = receivedMessage;
    this.messageLoss = messageLoss;
    this.sensors = sensors;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return state;
    case 1: return receivedMessage;
    case 2: return messageLoss;
    case 3: return sensors;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: state = (org.radarcns.avro.restapi.source.State)value$; break;
    case 1: receivedMessage = (java.lang.Integer)value$; break;
    case 2: messageLoss = (java.lang.Double)value$; break;
    case 3: sensors = (java.util.Map<java.lang.String,org.radarcns.avro.restapi.sensor.Sensor>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'state' field.
   * @return Current source state computed using the received data
   */
  public org.radarcns.avro.restapi.source.State getState() {
    return state;
  }

  /**
   * Sets the value of the 'state' field.
   * Current source state computed using the received data
   * @param value the value to set.
   */
  public void setState(org.radarcns.avro.restapi.source.State value) {
    this.state = value;
  }

  /**
   * Gets the value of the 'receivedMessage' field.
   * @return Amount of received messages
   */
  public java.lang.Integer getReceivedMessage() {
    return receivedMessage;
  }

  /**
   * Sets the value of the 'receivedMessage' field.
   * Amount of received messages
   * @param value the value to set.
   */
  public void setReceivedMessage(java.lang.Integer value) {
    this.receivedMessage = value;
  }

  /**
   * Gets the value of the 'messageLoss' field.
   * @return Percentage of lost messages
   */
  public java.lang.Double getMessageLoss() {
    return messageLoss;
  }

  /**
   * Sets the value of the 'messageLoss' field.
   * Percentage of lost messages
   * @param value the value to set.
   */
  public void setMessageLoss(java.lang.Double value) {
    this.messageLoss = value;
  }

  /**
   * Gets the value of the 'sensors' field.
   * @return The value of the 'sensors' field.
   */
  public java.util.Map<java.lang.String,org.radarcns.avro.restapi.sensor.Sensor> getSensors() {
    return sensors;
  }

  /**
   * Sets the value of the 'sensors' field.
   * @param value the value to set.
   */
  public void setSensors(java.util.Map<java.lang.String,org.radarcns.avro.restapi.sensor.Sensor> value) {
    this.sensors = value;
  }

  /**
   * Creates a new SourceSummary RecordBuilder.
   * @return A new SourceSummary RecordBuilder
   */
  public static org.radarcns.avro.restapi.source.SourceSummary.Builder newBuilder() {
    return new org.radarcns.avro.restapi.source.SourceSummary.Builder();
  }

  /**
   * Creates a new SourceSummary RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SourceSummary RecordBuilder
   */
  public static org.radarcns.avro.restapi.source.SourceSummary.Builder newBuilder(org.radarcns.avro.restapi.source.SourceSummary.Builder other) {
    return new org.radarcns.avro.restapi.source.SourceSummary.Builder(other);
  }

  /**
   * Creates a new SourceSummary RecordBuilder by copying an existing SourceSummary instance.
   * @param other The existing instance to copy.
   * @return A new SourceSummary RecordBuilder
   */
  public static org.radarcns.avro.restapi.source.SourceSummary.Builder newBuilder(org.radarcns.avro.restapi.source.SourceSummary other) {
    return new org.radarcns.avro.restapi.source.SourceSummary.Builder(other);
  }

  /**
   * RecordBuilder for SourceSummary instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SourceSummary>
    implements org.apache.avro.data.RecordBuilder<SourceSummary> {

    /** Current source state computed using the received data */
    private org.radarcns.avro.restapi.source.State state;
    /** Amount of received messages */
    private int receivedMessage;
    /** Percentage of lost messages */
    private double messageLoss;
    private java.util.Map<java.lang.String,org.radarcns.avro.restapi.sensor.Sensor> sensors;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.radarcns.avro.restapi.source.SourceSummary.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.state)) {
        this.state = data().deepCopy(fields()[0].schema(), other.state);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.receivedMessage)) {
        this.receivedMessage = data().deepCopy(fields()[1].schema(), other.receivedMessage);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.messageLoss)) {
        this.messageLoss = data().deepCopy(fields()[2].schema(), other.messageLoss);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.sensors)) {
        this.sensors = data().deepCopy(fields()[3].schema(), other.sensors);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing SourceSummary instance
     * @param other The existing instance to copy.
     */
    private Builder(org.radarcns.avro.restapi.source.SourceSummary other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.state)) {
        this.state = data().deepCopy(fields()[0].schema(), other.state);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.receivedMessage)) {
        this.receivedMessage = data().deepCopy(fields()[1].schema(), other.receivedMessage);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.messageLoss)) {
        this.messageLoss = data().deepCopy(fields()[2].schema(), other.messageLoss);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.sensors)) {
        this.sensors = data().deepCopy(fields()[3].schema(), other.sensors);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'state' field.
      * Current source state computed using the received data
      * @return The value.
      */
    public org.radarcns.avro.restapi.source.State getState() {
      return state;
    }

    /**
      * Sets the value of the 'state' field.
      * Current source state computed using the received data
      * @param value The value of 'state'.
      * @return This builder.
      */
    public org.radarcns.avro.restapi.source.SourceSummary.Builder setState(org.radarcns.avro.restapi.source.State value) {
      validate(fields()[0], value);
      this.state = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'state' field has been set.
      * Current source state computed using the received data
      * @return True if the 'state' field has been set, false otherwise.
      */
    public boolean hasState() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'state' field.
      * Current source state computed using the received data
      * @return This builder.
      */
    public org.radarcns.avro.restapi.source.SourceSummary.Builder clearState() {
      state = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'receivedMessage' field.
      * Amount of received messages
      * @return The value.
      */
    public java.lang.Integer getReceivedMessage() {
      return receivedMessage;
    }

    /**
      * Sets the value of the 'receivedMessage' field.
      * Amount of received messages
      * @param value The value of 'receivedMessage'.
      * @return This builder.
      */
    public org.radarcns.avro.restapi.source.SourceSummary.Builder setReceivedMessage(int value) {
      validate(fields()[1], value);
      this.receivedMessage = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'receivedMessage' field has been set.
      * Amount of received messages
      * @return True if the 'receivedMessage' field has been set, false otherwise.
      */
    public boolean hasReceivedMessage() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'receivedMessage' field.
      * Amount of received messages
      * @return This builder.
      */
    public org.radarcns.avro.restapi.source.SourceSummary.Builder clearReceivedMessage() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'messageLoss' field.
      * Percentage of lost messages
      * @return The value.
      */
    public java.lang.Double getMessageLoss() {
      return messageLoss;
    }

    /**
      * Sets the value of the 'messageLoss' field.
      * Percentage of lost messages
      * @param value The value of 'messageLoss'.
      * @return This builder.
      */
    public org.radarcns.avro.restapi.source.SourceSummary.Builder setMessageLoss(double value) {
      validate(fields()[2], value);
      this.messageLoss = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'messageLoss' field has been set.
      * Percentage of lost messages
      * @return True if the 'messageLoss' field has been set, false otherwise.
      */
    public boolean hasMessageLoss() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'messageLoss' field.
      * Percentage of lost messages
      * @return This builder.
      */
    public org.radarcns.avro.restapi.source.SourceSummary.Builder clearMessageLoss() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'sensors' field.
      * @return The value.
      */
    public java.util.Map<java.lang.String,org.radarcns.avro.restapi.sensor.Sensor> getSensors() {
      return sensors;
    }

    /**
      * Sets the value of the 'sensors' field.
      * @param value The value of 'sensors'.
      * @return This builder.
      */
    public org.radarcns.avro.restapi.source.SourceSummary.Builder setSensors(java.util.Map<java.lang.String,org.radarcns.avro.restapi.sensor.Sensor> value) {
      validate(fields()[3], value);
      this.sensors = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'sensors' field has been set.
      * @return True if the 'sensors' field has been set, false otherwise.
      */
    public boolean hasSensors() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'sensors' field.
      * @return This builder.
      */
    public org.radarcns.avro.restapi.source.SourceSummary.Builder clearSensors() {
      sensors = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public SourceSummary build() {
      try {
        SourceSummary record = new SourceSummary();
        record.state = fieldSetFlags()[0] ? this.state : (org.radarcns.avro.restapi.source.State) defaultValue(fields()[0]);
        record.receivedMessage = fieldSetFlags()[1] ? this.receivedMessage : (java.lang.Integer) defaultValue(fields()[1]);
        record.messageLoss = fieldSetFlags()[2] ? this.messageLoss : (java.lang.Double) defaultValue(fields()[2]);
        record.sensors = fieldSetFlags()[3] ? this.sensors : (java.util.Map<java.lang.String,org.radarcns.avro.restapi.sensor.Sensor>) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
