/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.radarcns.avro.restapi.source;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** Source details */
@org.apache.avro.specific.AvroGenerated
public class Source extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5343888051754244294L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Source\",\"namespace\":\"org.radarcns.avro.restapi.source\",\"doc\":\"Source details\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Source id\"},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"SourceType\",\"doc\":\"All available sources\",\"symbols\":[\"ANDROID\",\"EMPATICA\",\"PEBBLE\",\"BIOVOTION\"]},\"doc\":\"Source name\"},{\"name\":\"summary\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"SourceSummary\",\"doc\":\"Details about the source with details for each sensor\",\"fields\":[{\"name\":\"state\",\"type\":{\"type\":\"enum\",\"name\":\"State\",\"doc\":\"Set of device status\",\"symbols\":[\"FINE\",\"OK\",\"WARNING\",\"DISCONNECTED\",\"UNKNOWN\"]},\"doc\":\"Current source state computed using the received data\",\"default\":\"UNKNOWN\"},{\"name\":\"receivedMessage\",\"type\":\"int\",\"doc\":\"Amount of received messages\",\"default\":-1},{\"name\":\"messageLoss\",\"type\":\"double\",\"doc\":\"Percentage of lost messages\",\"default\":-1.0},{\"name\":\"sensors\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"record\",\"name\":\"Sensor\",\"namespace\":\"org.radarcns.avro.restapi.sensor\",\"doc\":\"Sensor details\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"enum\",\"name\":\"SensorType\",\"doc\":\"Set of sensor type\",\"symbols\":[\"ACCELEROMETER\",\"BATTERY\",\"BLOOD_VOLUME_PULSE\",\"ELECTRODERMAL_ACTIVITY\",\"INTER_BEAT_INTERVAL\",\"HEART_RATE\",\"THERMOMETER\"]},\"doc\":\"Sensor name\"},{\"name\":\"state\",\"type\":\"org.radarcns.avro.restapi.source.State\",\"doc\":\"Current sensor state computed using the received data\",\"default\":\"UNKNOWN\"},{\"name\":\"receivedMessage\",\"type\":\"int\",\"doc\":\"Amount of received messages\",\"default\":-1},{\"name\":\"messageLoss\",\"type\":\"double\",\"doc\":\"Percentage of lost messages\",\"default\":-1.0}]},\"avro.java.string\":\"String\"}}]}],\"doc\":\"Source details\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Source id */
  @Deprecated public java.lang.String id;
  /** Source name */
  @Deprecated public org.radarcns.avro.restapi.source.SourceType type;
  /** Source details */
  @Deprecated public org.radarcns.avro.restapi.source.SourceSummary summary;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Source() {}

  /**
   * All-args constructor.
   * @param id Source id
   * @param type Source name
   * @param summary Source details
   */
  public Source(java.lang.String id, org.radarcns.avro.restapi.source.SourceType type, org.radarcns.avro.restapi.source.SourceSummary summary) {
    this.id = id;
    this.type = type;
    this.summary = summary;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return type;
    case 2: return summary;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.String)value$; break;
    case 1: type = (org.radarcns.avro.restapi.source.SourceType)value$; break;
    case 2: summary = (org.radarcns.avro.restapi.source.SourceSummary)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return Source id
   */
  public java.lang.String getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * Source id
   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return Source name
   */
  public org.radarcns.avro.restapi.source.SourceType getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * Source name
   * @param value the value to set.
   */
  public void setType(org.radarcns.avro.restapi.source.SourceType value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'summary' field.
   * @return Source details
   */
  public org.radarcns.avro.restapi.source.SourceSummary getSummary() {
    return summary;
  }

  /**
   * Sets the value of the 'summary' field.
   * Source details
   * @param value the value to set.
   */
  public void setSummary(org.radarcns.avro.restapi.source.SourceSummary value) {
    this.summary = value;
  }

  /**
   * Creates a new Source RecordBuilder.
   * @return A new Source RecordBuilder
   */
  public static org.radarcns.avro.restapi.source.Source.Builder newBuilder() {
    return new org.radarcns.avro.restapi.source.Source.Builder();
  }

  /**
   * Creates a new Source RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Source RecordBuilder
   */
  public static org.radarcns.avro.restapi.source.Source.Builder newBuilder(org.radarcns.avro.restapi.source.Source.Builder other) {
    return new org.radarcns.avro.restapi.source.Source.Builder(other);
  }

  /**
   * Creates a new Source RecordBuilder by copying an existing Source instance.
   * @param other The existing instance to copy.
   * @return A new Source RecordBuilder
   */
  public static org.radarcns.avro.restapi.source.Source.Builder newBuilder(org.radarcns.avro.restapi.source.Source other) {
    return new org.radarcns.avro.restapi.source.Source.Builder(other);
  }

  /**
   * RecordBuilder for Source instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Source>
    implements org.apache.avro.data.RecordBuilder<Source> {

    /** Source id */
    private java.lang.String id;
    /** Source name */
    private org.radarcns.avro.restapi.source.SourceType type;
    /** Source details */
    private org.radarcns.avro.restapi.source.SourceSummary summary;
    private org.radarcns.avro.restapi.source.SourceSummary.Builder summaryBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.radarcns.avro.restapi.source.Source.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.summary)) {
        this.summary = data().deepCopy(fields()[2].schema(), other.summary);
        fieldSetFlags()[2] = true;
      }
      if (other.hasSummaryBuilder()) {
        this.summaryBuilder = org.radarcns.avro.restapi.source.SourceSummary.newBuilder(other.getSummaryBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Source instance
     * @param other The existing instance to copy.
     */
    private Builder(org.radarcns.avro.restapi.source.Source other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.summary)) {
        this.summary = data().deepCopy(fields()[2].schema(), other.summary);
        fieldSetFlags()[2] = true;
      }
      this.summaryBuilder = null;
    }

    /**
      * Gets the value of the 'id' field.
      * Source id
      * @return The value.
      */
    public java.lang.String getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * Source id
      * @param value The value of 'id'.
      * @return This builder.
      */
    public org.radarcns.avro.restapi.source.Source.Builder setId(java.lang.String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * Source id
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * Source id
      * @return This builder.
      */
    public org.radarcns.avro.restapi.source.Source.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * Source name
      * @return The value.
      */
    public org.radarcns.avro.restapi.source.SourceType getType() {
      return type;
    }

    /**
      * Sets the value of the 'type' field.
      * Source name
      * @param value The value of 'type'.
      * @return This builder.
      */
    public org.radarcns.avro.restapi.source.Source.Builder setType(org.radarcns.avro.restapi.source.SourceType value) {
      validate(fields()[1], value);
      this.type = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * Source name
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'type' field.
      * Source name
      * @return This builder.
      */
    public org.radarcns.avro.restapi.source.Source.Builder clearType() {
      type = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'summary' field.
      * Source details
      * @return The value.
      */
    public org.radarcns.avro.restapi.source.SourceSummary getSummary() {
      return summary;
    }

    /**
      * Sets the value of the 'summary' field.
      * Source details
      * @param value The value of 'summary'.
      * @return This builder.
      */
    public org.radarcns.avro.restapi.source.Source.Builder setSummary(org.radarcns.avro.restapi.source.SourceSummary value) {
      validate(fields()[2], value);
      this.summaryBuilder = null;
      this.summary = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'summary' field has been set.
      * Source details
      * @return True if the 'summary' field has been set, false otherwise.
      */
    public boolean hasSummary() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'summary' field and creates one if it doesn't exist yet.
     * Source details
     * @return This builder.
     */
    public org.radarcns.avro.restapi.source.SourceSummary.Builder getSummaryBuilder() {
      if (summaryBuilder == null) {
        if (hasSummary()) {
          setSummaryBuilder(org.radarcns.avro.restapi.source.SourceSummary.newBuilder(summary));
        } else {
          setSummaryBuilder(org.radarcns.avro.restapi.source.SourceSummary.newBuilder());
        }
      }
      return summaryBuilder;
    }

    /**
     * Sets the Builder instance for the 'summary' field
     * Source details
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public org.radarcns.avro.restapi.source.Source.Builder setSummaryBuilder(org.radarcns.avro.restapi.source.SourceSummary.Builder value) {
      clearSummary();
      summaryBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'summary' field has an active Builder instance
     * Source details
     * @return True if the 'summary' field has an active Builder instance
     */
    public boolean hasSummaryBuilder() {
      return summaryBuilder != null;
    }

    /**
      * Clears the value of the 'summary' field.
      * Source details
      * @return This builder.
      */
    public org.radarcns.avro.restapi.source.Source.Builder clearSummary() {
      summary = null;
      summaryBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public Source build() {
      try {
        Source record = new Source();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.String) defaultValue(fields()[0]);
        record.type = fieldSetFlags()[1] ? this.type : (org.radarcns.avro.restapi.source.SourceType) defaultValue(fields()[1]);
        if (summaryBuilder != null) {
          record.summary = this.summaryBuilder.build();
        } else {
          record.summary = fieldSetFlags()[2] ? this.summary : (org.radarcns.avro.restapi.source.SourceSummary) defaultValue(fields()[2]);
        }
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
