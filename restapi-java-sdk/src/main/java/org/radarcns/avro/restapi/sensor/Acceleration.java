/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.radarcns.avro.restapi.sensor;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** Acceleration item for a dataset with gravitational constant g as unit. */
@org.apache.avro.specific.AvroGenerated
public class Acceleration extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7833429963277255591L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Acceleration\",\"namespace\":\"org.radarcns.avro.restapi.sensor\",\"doc\":\"Acceleration item for a dataset with gravitational constant g as unit.\",\"fields\":[{\"name\":\"x\",\"type\":[\"double\",{\"type\":\"record\",\"name\":\"Quartiles\",\"namespace\":\"org.radarcns.avro.restapi.dataset\",\"doc\":\"List of quartiles\",\"fields\":[{\"name\":\"first\",\"type\":\"double\"},{\"name\":\"second\",\"type\":\"double\"},{\"name\":\"third\",\"type\":\"double\"}]}]},{\"name\":\"y\",\"type\":[\"double\",\"org.radarcns.avro.restapi.dataset.Quartiles\"]},{\"name\":\"z\",\"type\":[\"double\",\"org.radarcns.avro.restapi.dataset.Quartiles\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.Object x;
  @Deprecated public java.lang.Object y;
  @Deprecated public java.lang.Object z;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Acceleration() {}

  /**
   * All-args constructor.
   * @param x The new value for x
   * @param y The new value for y
   * @param z The new value for z
   */
  public Acceleration(java.lang.Object x, java.lang.Object y, java.lang.Object z) {
    this.x = x;
    this.y = y;
    this.z = z;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return x;
    case 1: return y;
    case 2: return z;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: x = (java.lang.Object)value$; break;
    case 1: y = (java.lang.Object)value$; break;
    case 2: z = (java.lang.Object)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'x' field.
   * @return The value of the 'x' field.
   */
  public java.lang.Object getX() {
    return x;
  }

  /**
   * Sets the value of the 'x' field.
   * @param value the value to set.
   */
  public void setX(java.lang.Object value) {
    this.x = value;
  }

  /**
   * Gets the value of the 'y' field.
   * @return The value of the 'y' field.
   */
  public java.lang.Object getY() {
    return y;
  }

  /**
   * Sets the value of the 'y' field.
   * @param value the value to set.
   */
  public void setY(java.lang.Object value) {
    this.y = value;
  }

  /**
   * Gets the value of the 'z' field.
   * @return The value of the 'z' field.
   */
  public java.lang.Object getZ() {
    return z;
  }

  /**
   * Sets the value of the 'z' field.
   * @param value the value to set.
   */
  public void setZ(java.lang.Object value) {
    this.z = value;
  }

  /**
   * Creates a new Acceleration RecordBuilder.
   * @return A new Acceleration RecordBuilder
   */
  public static org.radarcns.avro.restapi.sensor.Acceleration.Builder newBuilder() {
    return new org.radarcns.avro.restapi.sensor.Acceleration.Builder();
  }

  /**
   * Creates a new Acceleration RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Acceleration RecordBuilder
   */
  public static org.radarcns.avro.restapi.sensor.Acceleration.Builder newBuilder(org.radarcns.avro.restapi.sensor.Acceleration.Builder other) {
    return new org.radarcns.avro.restapi.sensor.Acceleration.Builder(other);
  }

  /**
   * Creates a new Acceleration RecordBuilder by copying an existing Acceleration instance.
   * @param other The existing instance to copy.
   * @return A new Acceleration RecordBuilder
   */
  public static org.radarcns.avro.restapi.sensor.Acceleration.Builder newBuilder(org.radarcns.avro.restapi.sensor.Acceleration other) {
    return new org.radarcns.avro.restapi.sensor.Acceleration.Builder(other);
  }

  /**
   * RecordBuilder for Acceleration instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Acceleration>
    implements org.apache.avro.data.RecordBuilder<Acceleration> {

    private java.lang.Object x;
    private java.lang.Object y;
    private java.lang.Object z;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.radarcns.avro.restapi.sensor.Acceleration.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.x)) {
        this.x = data().deepCopy(fields()[0].schema(), other.x);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.y)) {
        this.y = data().deepCopy(fields()[1].schema(), other.y);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.z)) {
        this.z = data().deepCopy(fields()[2].schema(), other.z);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Acceleration instance
     * @param other The existing instance to copy.
     */
    private Builder(org.radarcns.avro.restapi.sensor.Acceleration other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.x)) {
        this.x = data().deepCopy(fields()[0].schema(), other.x);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.y)) {
        this.y = data().deepCopy(fields()[1].schema(), other.y);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.z)) {
        this.z = data().deepCopy(fields()[2].schema(), other.z);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'x' field.
      * @return The value.
      */
    public java.lang.Object getX() {
      return x;
    }

    /**
      * Sets the value of the 'x' field.
      * @param value The value of 'x'.
      * @return This builder.
      */
    public org.radarcns.avro.restapi.sensor.Acceleration.Builder setX(java.lang.Object value) {
      validate(fields()[0], value);
      this.x = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'x' field has been set.
      * @return True if the 'x' field has been set, false otherwise.
      */
    public boolean hasX() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'x' field.
      * @return This builder.
      */
    public org.radarcns.avro.restapi.sensor.Acceleration.Builder clearX() {
      x = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'y' field.
      * @return The value.
      */
    public java.lang.Object getY() {
      return y;
    }

    /**
      * Sets the value of the 'y' field.
      * @param value The value of 'y'.
      * @return This builder.
      */
    public org.radarcns.avro.restapi.sensor.Acceleration.Builder setY(java.lang.Object value) {
      validate(fields()[1], value);
      this.y = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'y' field has been set.
      * @return True if the 'y' field has been set, false otherwise.
      */
    public boolean hasY() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'y' field.
      * @return This builder.
      */
    public org.radarcns.avro.restapi.sensor.Acceleration.Builder clearY() {
      y = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'z' field.
      * @return The value.
      */
    public java.lang.Object getZ() {
      return z;
    }

    /**
      * Sets the value of the 'z' field.
      * @param value The value of 'z'.
      * @return This builder.
      */
    public org.radarcns.avro.restapi.sensor.Acceleration.Builder setZ(java.lang.Object value) {
      validate(fields()[2], value);
      this.z = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'z' field has been set.
      * @return True if the 'z' field has been set, false otherwise.
      */
    public boolean hasZ() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'z' field.
      * @return This builder.
      */
    public org.radarcns.avro.restapi.sensor.Acceleration.Builder clearZ() {
      z = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public Acceleration build() {
      try {
        Acceleration record = new Acceleration();
        record.x = fieldSetFlags()[0] ? this.x : (java.lang.Object) defaultValue(fields()[0]);
        record.y = fieldSetFlags()[1] ? this.y : (java.lang.Object) defaultValue(fields()[1]);
        record.z = fieldSetFlags()[2] ? this.z : (java.lang.Object) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
