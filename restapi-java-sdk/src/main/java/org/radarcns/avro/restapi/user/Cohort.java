/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.radarcns.avro.restapi.user;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** Cohort definition */
@org.apache.avro.specific.AvroGenerated
public class Cohort extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8921228917140393449L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Cohort\",\"namespace\":\"org.radarcns.avro.restapi.user\",\"doc\":\"Cohort definition\",\"fields\":[{\"name\":\"studyId\",\"type\":\"int\",\"doc\":\"ID related to the study\"},{\"name\":\"patients\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Patient\",\"doc\":\"Patient definition\",\"fields\":[{\"name\":\"userId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"User identifier\"},{\"name\":\"sources\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Source\",\"namespace\":\"org.radarcns.avro.restapi.source\",\"doc\":\"Source details\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Source id\"},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"SourceType\",\"doc\":\"All available sources\",\"symbols\":[\"ANDROID\",\"EMPATICA\",\"PEBBLE\",\"BIOVOTION\"]},\"doc\":\"Source name\"},{\"name\":\"summary\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"SourceSummary\",\"doc\":\"Details about the source with details for each sensor\",\"fields\":[{\"name\":\"state\",\"type\":{\"type\":\"enum\",\"name\":\"State\",\"doc\":\"Set of device status\",\"symbols\":[\"FINE\",\"OK\",\"WARNING\",\"DISCONNECTED\",\"UNKNOWN\"]},\"doc\":\"Current source state computed using the received data\",\"default\":\"UNKNOWN\"},{\"name\":\"receivedMessage\",\"type\":\"int\",\"doc\":\"Amount of received messages\",\"default\":-1},{\"name\":\"messageLoss\",\"type\":\"double\",\"doc\":\"Percentage of lost messages\",\"default\":-1.0},{\"name\":\"sensors\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"record\",\"name\":\"Sensor\",\"namespace\":\"org.radarcns.avro.restapi.sensor\",\"doc\":\"Sensor details\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"enum\",\"name\":\"SensorType\",\"doc\":\"Set of sensor type\",\"symbols\":[\"ACCELEROMETER\",\"BATTERY\",\"BLOOD_VOLUME_PULSE\",\"ELECTRODERMAL_ACTIVITY\",\"INTER_BEAT_INTERVAL\",\"HEART_RATE\",\"THERMOMETER\"]},\"doc\":\"Sensor name\"},{\"name\":\"state\",\"type\":\"org.radarcns.avro.restapi.source.State\",\"doc\":\"Current sensor state computed using the received data\",\"default\":\"UNKNOWN\"},{\"name\":\"receivedMessage\",\"type\":\"int\",\"doc\":\"Amount of received messages\",\"default\":-1},{\"name\":\"messageLoss\",\"type\":\"double\",\"doc\":\"Percentage of lost messages\",\"default\":-1.0}]},\"avro.java.string\":\"String\"}}]}],\"doc\":\"Source details\",\"default\":null}]}},\"doc\":\"List of all sources used by the Patient\"}]}},\"doc\":\"List of patients involved in the study\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** ID related to the study */
  @Deprecated public int studyId;
  /** List of patients involved in the study */
  @Deprecated public java.util.List<org.radarcns.avro.restapi.user.Patient> patients;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Cohort() {}

  /**
   * All-args constructor.
   * @param studyId ID related to the study
   * @param patients List of patients involved in the study
   */
  public Cohort(java.lang.Integer studyId, java.util.List<org.radarcns.avro.restapi.user.Patient> patients) {
    this.studyId = studyId;
    this.patients = patients;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return studyId;
    case 1: return patients;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: studyId = (java.lang.Integer)value$; break;
    case 1: patients = (java.util.List<org.radarcns.avro.restapi.user.Patient>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'studyId' field.
   * @return ID related to the study
   */
  public java.lang.Integer getStudyId() {
    return studyId;
  }

  /**
   * Sets the value of the 'studyId' field.
   * ID related to the study
   * @param value the value to set.
   */
  public void setStudyId(java.lang.Integer value) {
    this.studyId = value;
  }

  /**
   * Gets the value of the 'patients' field.
   * @return List of patients involved in the study
   */
  public java.util.List<org.radarcns.avro.restapi.user.Patient> getPatients() {
    return patients;
  }

  /**
   * Sets the value of the 'patients' field.
   * List of patients involved in the study
   * @param value the value to set.
   */
  public void setPatients(java.util.List<org.radarcns.avro.restapi.user.Patient> value) {
    this.patients = value;
  }

  /**
   * Creates a new Cohort RecordBuilder.
   * @return A new Cohort RecordBuilder
   */
  public static org.radarcns.avro.restapi.user.Cohort.Builder newBuilder() {
    return new org.radarcns.avro.restapi.user.Cohort.Builder();
  }

  /**
   * Creates a new Cohort RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Cohort RecordBuilder
   */
  public static org.radarcns.avro.restapi.user.Cohort.Builder newBuilder(org.radarcns.avro.restapi.user.Cohort.Builder other) {
    return new org.radarcns.avro.restapi.user.Cohort.Builder(other);
  }

  /**
   * Creates a new Cohort RecordBuilder by copying an existing Cohort instance.
   * @param other The existing instance to copy.
   * @return A new Cohort RecordBuilder
   */
  public static org.radarcns.avro.restapi.user.Cohort.Builder newBuilder(org.radarcns.avro.restapi.user.Cohort other) {
    return new org.radarcns.avro.restapi.user.Cohort.Builder(other);
  }

  /**
   * RecordBuilder for Cohort instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Cohort>
    implements org.apache.avro.data.RecordBuilder<Cohort> {

    /** ID related to the study */
    private int studyId;
    /** List of patients involved in the study */
    private java.util.List<org.radarcns.avro.restapi.user.Patient> patients;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.radarcns.avro.restapi.user.Cohort.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.studyId)) {
        this.studyId = data().deepCopy(fields()[0].schema(), other.studyId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.patients)) {
        this.patients = data().deepCopy(fields()[1].schema(), other.patients);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Cohort instance
     * @param other The existing instance to copy.
     */
    private Builder(org.radarcns.avro.restapi.user.Cohort other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.studyId)) {
        this.studyId = data().deepCopy(fields()[0].schema(), other.studyId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.patients)) {
        this.patients = data().deepCopy(fields()[1].schema(), other.patients);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'studyId' field.
      * ID related to the study
      * @return The value.
      */
    public java.lang.Integer getStudyId() {
      return studyId;
    }

    /**
      * Sets the value of the 'studyId' field.
      * ID related to the study
      * @param value The value of 'studyId'.
      * @return This builder.
      */
    public org.radarcns.avro.restapi.user.Cohort.Builder setStudyId(int value) {
      validate(fields()[0], value);
      this.studyId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'studyId' field has been set.
      * ID related to the study
      * @return True if the 'studyId' field has been set, false otherwise.
      */
    public boolean hasStudyId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'studyId' field.
      * ID related to the study
      * @return This builder.
      */
    public org.radarcns.avro.restapi.user.Cohort.Builder clearStudyId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'patients' field.
      * List of patients involved in the study
      * @return The value.
      */
    public java.util.List<org.radarcns.avro.restapi.user.Patient> getPatients() {
      return patients;
    }

    /**
      * Sets the value of the 'patients' field.
      * List of patients involved in the study
      * @param value The value of 'patients'.
      * @return This builder.
      */
    public org.radarcns.avro.restapi.user.Cohort.Builder setPatients(java.util.List<org.radarcns.avro.restapi.user.Patient> value) {
      validate(fields()[1], value);
      this.patients = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'patients' field has been set.
      * List of patients involved in the study
      * @return True if the 'patients' field has been set, false otherwise.
      */
    public boolean hasPatients() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'patients' field.
      * List of patients involved in the study
      * @return This builder.
      */
    public org.radarcns.avro.restapi.user.Cohort.Builder clearPatients() {
      patients = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public Cohort build() {
      try {
        Cohort record = new Cohort();
        record.studyId = fieldSetFlags()[0] ? this.studyId : (java.lang.Integer) defaultValue(fields()[0]);
        record.patients = fieldSetFlags()[1] ? this.patients : (java.util.List<org.radarcns.avro.restapi.user.Patient>) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
