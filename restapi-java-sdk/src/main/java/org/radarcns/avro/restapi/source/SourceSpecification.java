/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.radarcns.avro.restapi.source;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** Source specification */
@org.apache.avro.specific.AvroGenerated
public class SourceSpecification extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7668945963581965978L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SourceSpecification\",\"namespace\":\"org.radarcns.avro.restapi.source\",\"doc\":\"Source specification\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"enum\",\"name\":\"SourceType\",\"doc\":\"All available sources\",\"symbols\":[\"ANDROID\",\"EMPATICA\",\"PEBBLE\",\"BIOVOTION\"]},\"doc\":\"Source name\"},{\"name\":\"sensors\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"record\",\"name\":\"SensorSpecification\",\"namespace\":\"org.radarcns.avro.restapi.sensor\",\"doc\":\"Sensor specification\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"enum\",\"name\":\"SensorType\",\"doc\":\"Set of sensor type\",\"symbols\":[\"ACCELEROMETER\",\"BATTERY\",\"BLOOD_VOLUME_PULSE\",\"ELECTRODERMAL_ACTIVITY\",\"INTER_BEAT_INTERVAL\",\"HEART_RATE\",\"THERMOMETER\"]},\"doc\":\"Sensor name\"},{\"name\":\"dataType\",\"type\":{\"type\":\"enum\",\"name\":\"DataType\",\"doc\":\"States if the value is provided directly by a sensor or it is computed. Any value different from RAW states who computes the value.\",\"symbols\":[\"RAW\",\"VENDOR\",\"RADAR\"]},\"doc\":\"Explains if the values is a raw data, otherwise it reports who computes it\"},{\"name\":\"frequency\",\"type\":\"double\",\"doc\":\"Number of expected samples per second\",\"default\":-1.0},{\"name\":\"unit\",\"type\":{\"type\":\"enum\",\"name\":\"Unit\",\"doc\":\"Set of measurement units\",\"symbols\":[\"BEATS_PER_MIN\",\"CELSIUS\",\"DIMENSIONLESS\",\"G\",\"MICROSIEMENS\",\"SECOND\",\"NANOWATT\",\"PERCENTAGE\"]},\"doc\":\"Measurement unit used by the sensor\"}]},\"avro.java.string\":\"String\"},\"doc\":\"Specifications of on board sensors. It is a map where the key is the String conversion of a SensorType\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Source name */
  @Deprecated public org.radarcns.avro.restapi.source.SourceType name;
  /** Specifications of on board sensors. It is a map where the key is the String conversion of a SensorType */
  @Deprecated public java.util.Map<java.lang.String,org.radarcns.avro.restapi.sensor.SensorSpecification> sensors;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SourceSpecification() {}

  /**
   * All-args constructor.
   * @param name Source name
   * @param sensors Specifications of on board sensors. It is a map where the key is the String conversion of a SensorType
   */
  public SourceSpecification(org.radarcns.avro.restapi.source.SourceType name, java.util.Map<java.lang.String,org.radarcns.avro.restapi.sensor.SensorSpecification> sensors) {
    this.name = name;
    this.sensors = sensors;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return sensors;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (org.radarcns.avro.restapi.source.SourceType)value$; break;
    case 1: sensors = (java.util.Map<java.lang.String,org.radarcns.avro.restapi.sensor.SensorSpecification>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   * @return Source name
   */
  public org.radarcns.avro.restapi.source.SourceType getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * Source name
   * @param value the value to set.
   */
  public void setName(org.radarcns.avro.restapi.source.SourceType value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'sensors' field.
   * @return Specifications of on board sensors. It is a map where the key is the String conversion of a SensorType
   */
  public java.util.Map<java.lang.String,org.radarcns.avro.restapi.sensor.SensorSpecification> getSensors() {
    return sensors;
  }

  /**
   * Sets the value of the 'sensors' field.
   * Specifications of on board sensors. It is a map where the key is the String conversion of a SensorType
   * @param value the value to set.
   */
  public void setSensors(java.util.Map<java.lang.String,org.radarcns.avro.restapi.sensor.SensorSpecification> value) {
    this.sensors = value;
  }

  /**
   * Creates a new SourceSpecification RecordBuilder.
   * @return A new SourceSpecification RecordBuilder
   */
  public static org.radarcns.avro.restapi.source.SourceSpecification.Builder newBuilder() {
    return new org.radarcns.avro.restapi.source.SourceSpecification.Builder();
  }

  /**
   * Creates a new SourceSpecification RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SourceSpecification RecordBuilder
   */
  public static org.radarcns.avro.restapi.source.SourceSpecification.Builder newBuilder(org.radarcns.avro.restapi.source.SourceSpecification.Builder other) {
    return new org.radarcns.avro.restapi.source.SourceSpecification.Builder(other);
  }

  /**
   * Creates a new SourceSpecification RecordBuilder by copying an existing SourceSpecification instance.
   * @param other The existing instance to copy.
   * @return A new SourceSpecification RecordBuilder
   */
  public static org.radarcns.avro.restapi.source.SourceSpecification.Builder newBuilder(org.radarcns.avro.restapi.source.SourceSpecification other) {
    return new org.radarcns.avro.restapi.source.SourceSpecification.Builder(other);
  }

  /**
   * RecordBuilder for SourceSpecification instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SourceSpecification>
    implements org.apache.avro.data.RecordBuilder<SourceSpecification> {

    /** Source name */
    private org.radarcns.avro.restapi.source.SourceType name;
    /** Specifications of on board sensors. It is a map where the key is the String conversion of a SensorType */
    private java.util.Map<java.lang.String,org.radarcns.avro.restapi.sensor.SensorSpecification> sensors;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.radarcns.avro.restapi.source.SourceSpecification.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sensors)) {
        this.sensors = data().deepCopy(fields()[1].schema(), other.sensors);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing SourceSpecification instance
     * @param other The existing instance to copy.
     */
    private Builder(org.radarcns.avro.restapi.source.SourceSpecification other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sensors)) {
        this.sensors = data().deepCopy(fields()[1].schema(), other.sensors);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'name' field.
      * Source name
      * @return The value.
      */
    public org.radarcns.avro.restapi.source.SourceType getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * Source name
      * @param value The value of 'name'.
      * @return This builder.
      */
    public org.radarcns.avro.restapi.source.SourceSpecification.Builder setName(org.radarcns.avro.restapi.source.SourceType value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * Source name
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'name' field.
      * Source name
      * @return This builder.
      */
    public org.radarcns.avro.restapi.source.SourceSpecification.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'sensors' field.
      * Specifications of on board sensors. It is a map where the key is the String conversion of a SensorType
      * @return The value.
      */
    public java.util.Map<java.lang.String,org.radarcns.avro.restapi.sensor.SensorSpecification> getSensors() {
      return sensors;
    }

    /**
      * Sets the value of the 'sensors' field.
      * Specifications of on board sensors. It is a map where the key is the String conversion of a SensorType
      * @param value The value of 'sensors'.
      * @return This builder.
      */
    public org.radarcns.avro.restapi.source.SourceSpecification.Builder setSensors(java.util.Map<java.lang.String,org.radarcns.avro.restapi.sensor.SensorSpecification> value) {
      validate(fields()[1], value);
      this.sensors = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'sensors' field has been set.
      * Specifications of on board sensors. It is a map where the key is the String conversion of a SensorType
      * @return True if the 'sensors' field has been set, false otherwise.
      */
    public boolean hasSensors() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'sensors' field.
      * Specifications of on board sensors. It is a map where the key is the String conversion of a SensorType
      * @return This builder.
      */
    public org.radarcns.avro.restapi.source.SourceSpecification.Builder clearSensors() {
      sensors = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public SourceSpecification build() {
      try {
        SourceSpecification record = new SourceSpecification();
        record.name = fieldSetFlags()[0] ? this.name : (org.radarcns.avro.restapi.source.SourceType) defaultValue(fields()[0]);
        record.sensors = fieldSetFlags()[1] ? this.sensors : (java.util.Map<java.lang.String,org.radarcns.avro.restapi.sensor.SensorSpecification>) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
