/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.radarcns.avro.restapi.dataset;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** A generic dataset containing aggregated data. Its body is divide in Header and Dataset: metadata and sensor data. */
@org.apache.avro.specific.AvroGenerated
public class Dataset extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7005881990787561208L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Dataset\",\"namespace\":\"org.radarcns.avro.restapi.dataset\",\"doc\":\"A generic dataset containing aggregated data. Its body is divide in Header and Dataset: metadata and sensor data.\",\"fields\":[{\"name\":\"header\",\"type\":{\"type\":\"record\",\"name\":\"Header\",\"namespace\":\"org.radarcns.avro.restapi.header\",\"doc\":\"Metadata for Dataset. It is a summary explaining what kind of information are stored in the Dataset.\",\"fields\":[{\"name\":\"descriptiveStatistic\",\"type\":{\"type\":\"enum\",\"name\":\"DescriptiveStatistic\",\"doc\":\"Set of available statical value\",\"symbols\":[\"AVERAGE\",\"COUNT\",\"MAXIMUM\",\"MEDIAN\",\"MINIMUM\",\"SUM\",\"INTERQUARTILE_RANGE\",\"LOWER_QUARTILE\",\"UPPER_QUARTILE\",\"QUARTILES\"]}},{\"name\":\"unit\",\"type\":{\"type\":\"enum\",\"name\":\"Unit\",\"namespace\":\"org.radarcns.avro.restapi.sensor\",\"doc\":\"Set of measurement units\",\"symbols\":[\"BEATS_PER_MIN\",\"CELSIUS\",\"DIMENSIONLESS\",\"G\",\"MICROSIEMENS\",\"SECOND\",\"NANOWATT\",\"PERCENTAGE\"]}},{\"name\":\"effectiveTimeFrame\",\"type\":{\"type\":\"record\",\"name\":\"EffectiveTimeFrame\",\"doc\":\"Time window\",\"fields\":[{\"name\":\"startDateTime\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"It is a point in time (ISO8601) with UTC timezone.\"},{\"name\":\"endDateTime\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"It is a point in time (ISO8601) with UTC timezone.\"}]}}]}},{\"name\":\"dataset\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Item\",\"doc\":\"Dataset item. It contains a value and its related time.\",\"fields\":[{\"name\":\"value\",\"type\":[{\"type\":\"record\",\"name\":\"HeartRate\",\"namespace\":\"org.radarcns.avro.restapi.sensor\",\"doc\":\"Heart Rate resulting from data aggregation. It is computed as (60 / ibi)\",\"fields\":[{\"name\":\"value\",\"type\":[\"double\",{\"type\":\"record\",\"name\":\"Quartiles\",\"namespace\":\"org.radarcns.avro.restapi.dataset\",\"doc\":\"List of quartiles\",\"fields\":[{\"name\":\"first\",\"type\":\"double\"},{\"name\":\"second\",\"type\":\"double\"},{\"name\":\"third\",\"type\":\"double\"}]}]}]},{\"type\":\"record\",\"name\":\"Acceleration\",\"namespace\":\"org.radarcns.avro.restapi.sensor\",\"doc\":\"Acceleration item for a dataset with gravitational constant g as unit.\",\"fields\":[{\"name\":\"x\",\"type\":[\"double\",\"org.radarcns.avro.restapi.dataset.Quartiles\"]},{\"name\":\"y\",\"type\":[\"double\",\"org.radarcns.avro.restapi.dataset.Quartiles\"]},{\"name\":\"z\",\"type\":[\"double\",\"org.radarcns.avro.restapi.dataset.Quartiles\"]}]},{\"type\":\"record\",\"name\":\"Battery\",\"namespace\":\"org.radarcns.avro.restapi.sensor\",\"doc\":\"The battery level resulting from the data aggregation. It is a double value between 0 and 1\",\"fields\":[{\"name\":\"value\",\"type\":[\"double\",\"org.radarcns.avro.restapi.dataset.Quartiles\"]}]},{\"type\":\"record\",\"name\":\"BloodVolumePulse\",\"namespace\":\"org.radarcns.avro.restapi.sensor\",\"doc\":\"Data from photoplethysmograph expressed in light absorption (nW)\",\"fields\":[{\"name\":\"value\",\"type\":[\"double\",\"org.radarcns.avro.restapi.dataset.Quartiles\"]}]},{\"type\":\"record\",\"name\":\"ElectroDermalActivity\",\"namespace\":\"org.radarcns.avro.restapi.sensor\",\"doc\":\"Aggregated data representing electrodermal activity expressed as microsiemens (µS)\",\"fields\":[{\"name\":\"value\",\"type\":[\"double\",\"org.radarcns.avro.restapi.dataset.Quartiles\"]}]},{\"type\":\"record\",\"name\":\"InterBeatInterval\",\"namespace\":\"org.radarcns.avro.restapi.sensor\",\"doc\":\"Time between individuals heart beats\",\"fields\":[{\"name\":\"value\",\"type\":[\"double\",\"org.radarcns.avro.restapi.dataset.Quartiles\"]}]},{\"type\":\"record\",\"name\":\"Temperature\",\"namespace\":\"org.radarcns.avro.restapi.sensor\",\"doc\":\"Temperature value expressed in Celsius (°C) scale\",\"fields\":[{\"name\":\"value\",\"type\":[\"double\",\"org.radarcns.avro.restapi.dataset.Quartiles\"]}]}]},{\"name\":\"effectiveTimeFrame\",\"type\":\"org.radarcns.avro.restapi.header.EffectiveTimeFrame\"}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public org.radarcns.avro.restapi.header.Header header;
  @Deprecated public java.util.List<org.radarcns.avro.restapi.dataset.Item> dataset;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Dataset() {}

  /**
   * All-args constructor.
   * @param header The new value for header
   * @param dataset The new value for dataset
   */
  public Dataset(org.radarcns.avro.restapi.header.Header header, java.util.List<org.radarcns.avro.restapi.dataset.Item> dataset) {
    this.header = header;
    this.dataset = dataset;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return header;
    case 1: return dataset;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: header = (org.radarcns.avro.restapi.header.Header)value$; break;
    case 1: dataset = (java.util.List<org.radarcns.avro.restapi.dataset.Item>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'header' field.
   * @return The value of the 'header' field.
   */
  public org.radarcns.avro.restapi.header.Header getHeader() {
    return header;
  }

  /**
   * Sets the value of the 'header' field.
   * @param value the value to set.
   */
  public void setHeader(org.radarcns.avro.restapi.header.Header value) {
    this.header = value;
  }

  /**
   * Gets the value of the 'dataset' field.
   * @return The value of the 'dataset' field.
   */
  public java.util.List<org.radarcns.avro.restapi.dataset.Item> getDataset() {
    return dataset;
  }

  /**
   * Sets the value of the 'dataset' field.
   * @param value the value to set.
   */
  public void setDataset(java.util.List<org.radarcns.avro.restapi.dataset.Item> value) {
    this.dataset = value;
  }

  /**
   * Creates a new Dataset RecordBuilder.
   * @return A new Dataset RecordBuilder
   */
  public static org.radarcns.avro.restapi.dataset.Dataset.Builder newBuilder() {
    return new org.radarcns.avro.restapi.dataset.Dataset.Builder();
  }

  /**
   * Creates a new Dataset RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Dataset RecordBuilder
   */
  public static org.radarcns.avro.restapi.dataset.Dataset.Builder newBuilder(org.radarcns.avro.restapi.dataset.Dataset.Builder other) {
    return new org.radarcns.avro.restapi.dataset.Dataset.Builder(other);
  }

  /**
   * Creates a new Dataset RecordBuilder by copying an existing Dataset instance.
   * @param other The existing instance to copy.
   * @return A new Dataset RecordBuilder
   */
  public static org.radarcns.avro.restapi.dataset.Dataset.Builder newBuilder(org.radarcns.avro.restapi.dataset.Dataset other) {
    return new org.radarcns.avro.restapi.dataset.Dataset.Builder(other);
  }

  /**
   * RecordBuilder for Dataset instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Dataset>
    implements org.apache.avro.data.RecordBuilder<Dataset> {

    private org.radarcns.avro.restapi.header.Header header;
    private org.radarcns.avro.restapi.header.Header.Builder headerBuilder;
    private java.util.List<org.radarcns.avro.restapi.dataset.Item> dataset;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.radarcns.avro.restapi.dataset.Dataset.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.header)) {
        this.header = data().deepCopy(fields()[0].schema(), other.header);
        fieldSetFlags()[0] = true;
      }
      if (other.hasHeaderBuilder()) {
        this.headerBuilder = org.radarcns.avro.restapi.header.Header.newBuilder(other.getHeaderBuilder());
      }
      if (isValidValue(fields()[1], other.dataset)) {
        this.dataset = data().deepCopy(fields()[1].schema(), other.dataset);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Dataset instance
     * @param other The existing instance to copy.
     */
    private Builder(org.radarcns.avro.restapi.dataset.Dataset other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.header)) {
        this.header = data().deepCopy(fields()[0].schema(), other.header);
        fieldSetFlags()[0] = true;
      }
      this.headerBuilder = null;
      if (isValidValue(fields()[1], other.dataset)) {
        this.dataset = data().deepCopy(fields()[1].schema(), other.dataset);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'header' field.
      * @return The value.
      */
    public org.radarcns.avro.restapi.header.Header getHeader() {
      return header;
    }

    /**
      * Sets the value of the 'header' field.
      * @param value The value of 'header'.
      * @return This builder.
      */
    public org.radarcns.avro.restapi.dataset.Dataset.Builder setHeader(org.radarcns.avro.restapi.header.Header value) {
      validate(fields()[0], value);
      this.headerBuilder = null;
      this.header = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'header' field has been set.
      * @return True if the 'header' field has been set, false otherwise.
      */
    public boolean hasHeader() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'header' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public org.radarcns.avro.restapi.header.Header.Builder getHeaderBuilder() {
      if (headerBuilder == null) {
        if (hasHeader()) {
          setHeaderBuilder(org.radarcns.avro.restapi.header.Header.newBuilder(header));
        } else {
          setHeaderBuilder(org.radarcns.avro.restapi.header.Header.newBuilder());
        }
      }
      return headerBuilder;
    }

    /**
     * Sets the Builder instance for the 'header' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public org.radarcns.avro.restapi.dataset.Dataset.Builder setHeaderBuilder(org.radarcns.avro.restapi.header.Header.Builder value) {
      clearHeader();
      headerBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'header' field has an active Builder instance
     * @return True if the 'header' field has an active Builder instance
     */
    public boolean hasHeaderBuilder() {
      return headerBuilder != null;
    }

    /**
      * Clears the value of the 'header' field.
      * @return This builder.
      */
    public org.radarcns.avro.restapi.dataset.Dataset.Builder clearHeader() {
      header = null;
      headerBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'dataset' field.
      * @return The value.
      */
    public java.util.List<org.radarcns.avro.restapi.dataset.Item> getDataset() {
      return dataset;
    }

    /**
      * Sets the value of the 'dataset' field.
      * @param value The value of 'dataset'.
      * @return This builder.
      */
    public org.radarcns.avro.restapi.dataset.Dataset.Builder setDataset(java.util.List<org.radarcns.avro.restapi.dataset.Item> value) {
      validate(fields()[1], value);
      this.dataset = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'dataset' field has been set.
      * @return True if the 'dataset' field has been set, false otherwise.
      */
    public boolean hasDataset() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'dataset' field.
      * @return This builder.
      */
    public org.radarcns.avro.restapi.dataset.Dataset.Builder clearDataset() {
      dataset = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public Dataset build() {
      try {
        Dataset record = new Dataset();
        if (headerBuilder != null) {
          record.header = this.headerBuilder.build();
        } else {
          record.header = fieldSetFlags()[0] ? this.header : (org.radarcns.avro.restapi.header.Header) defaultValue(fields()[0]);
        }
        record.dataset = fieldSetFlags()[1] ? this.dataset : (java.util.List<org.radarcns.avro.restapi.dataset.Item>) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
