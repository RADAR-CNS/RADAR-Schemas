/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.radarcns.avro.restapi.app;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** Smartphone application status */
@org.apache.avro.specific.AvroGenerated
public class Application extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8673051927912405340L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Application\",\"namespace\":\"org.radarcns.avro.restapi.app\",\"doc\":\"Smartphone application status\",\"fields\":[{\"name\":\"ipAddress\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Hardware identifier of client application\",\"default\":null},{\"name\":\"uptime\",\"type\":\"double\",\"doc\":\"Time since last app start (s)\"},{\"name\":\"serverStatus\",\"type\":{\"type\":\"enum\",\"name\":\"ServerStatus\",\"doc\":\"Set of device status\",\"symbols\":[\"CONNECTED\",\"DISCONNECTED\",\"UNKNOWN\"]},\"doc\":\"server connection status\",\"default\":\"UNKNOWN\"},{\"name\":\"recordsCached\",\"type\":\"int\",\"doc\":\"number of records currently being cached\",\"default\":-1},{\"name\":\"recordsSent\",\"type\":\"int\",\"doc\":\"number of records sent since application start\"},{\"name\":\"recordsUnsent\",\"type\":\"int\",\"doc\":\"number of unsent records\",\"default\":-1}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Hardware identifier of client application */
  @Deprecated public java.lang.String ipAddress;
  /** Time since last app start (s) */
  @Deprecated public double uptime;
  /** server connection status */
  @Deprecated public org.radarcns.avro.restapi.app.ServerStatus serverStatus;
  /** number of records currently being cached */
  @Deprecated public int recordsCached;
  /** number of records sent since application start */
  @Deprecated public int recordsSent;
  /** number of unsent records */
  @Deprecated public int recordsUnsent;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Application() {}

  /**
   * All-args constructor.
   * @param ipAddress Hardware identifier of client application
   * @param uptime Time since last app start (s)
   * @param serverStatus server connection status
   * @param recordsCached number of records currently being cached
   * @param recordsSent number of records sent since application start
   * @param recordsUnsent number of unsent records
   */
  public Application(java.lang.String ipAddress, java.lang.Double uptime, org.radarcns.avro.restapi.app.ServerStatus serverStatus, java.lang.Integer recordsCached, java.lang.Integer recordsSent, java.lang.Integer recordsUnsent) {
    this.ipAddress = ipAddress;
    this.uptime = uptime;
    this.serverStatus = serverStatus;
    this.recordsCached = recordsCached;
    this.recordsSent = recordsSent;
    this.recordsUnsent = recordsUnsent;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return ipAddress;
    case 1: return uptime;
    case 2: return serverStatus;
    case 3: return recordsCached;
    case 4: return recordsSent;
    case 5: return recordsUnsent;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: ipAddress = (java.lang.String)value$; break;
    case 1: uptime = (java.lang.Double)value$; break;
    case 2: serverStatus = (org.radarcns.avro.restapi.app.ServerStatus)value$; break;
    case 3: recordsCached = (java.lang.Integer)value$; break;
    case 4: recordsSent = (java.lang.Integer)value$; break;
    case 5: recordsUnsent = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'ipAddress' field.
   * @return Hardware identifier of client application
   */
  public java.lang.String getIpAddress() {
    return ipAddress;
  }

  /**
   * Sets the value of the 'ipAddress' field.
   * Hardware identifier of client application
   * @param value the value to set.
   */
  public void setIpAddress(java.lang.String value) {
    this.ipAddress = value;
  }

  /**
   * Gets the value of the 'uptime' field.
   * @return Time since last app start (s)
   */
  public java.lang.Double getUptime() {
    return uptime;
  }

  /**
   * Sets the value of the 'uptime' field.
   * Time since last app start (s)
   * @param value the value to set.
   */
  public void setUptime(java.lang.Double value) {
    this.uptime = value;
  }

  /**
   * Gets the value of the 'serverStatus' field.
   * @return server connection status
   */
  public org.radarcns.avro.restapi.app.ServerStatus getServerStatus() {
    return serverStatus;
  }

  /**
   * Sets the value of the 'serverStatus' field.
   * server connection status
   * @param value the value to set.
   */
  public void setServerStatus(org.radarcns.avro.restapi.app.ServerStatus value) {
    this.serverStatus = value;
  }

  /**
   * Gets the value of the 'recordsCached' field.
   * @return number of records currently being cached
   */
  public java.lang.Integer getRecordsCached() {
    return recordsCached;
  }

  /**
   * Sets the value of the 'recordsCached' field.
   * number of records currently being cached
   * @param value the value to set.
   */
  public void setRecordsCached(java.lang.Integer value) {
    this.recordsCached = value;
  }

  /**
   * Gets the value of the 'recordsSent' field.
   * @return number of records sent since application start
   */
  public java.lang.Integer getRecordsSent() {
    return recordsSent;
  }

  /**
   * Sets the value of the 'recordsSent' field.
   * number of records sent since application start
   * @param value the value to set.
   */
  public void setRecordsSent(java.lang.Integer value) {
    this.recordsSent = value;
  }

  /**
   * Gets the value of the 'recordsUnsent' field.
   * @return number of unsent records
   */
  public java.lang.Integer getRecordsUnsent() {
    return recordsUnsent;
  }

  /**
   * Sets the value of the 'recordsUnsent' field.
   * number of unsent records
   * @param value the value to set.
   */
  public void setRecordsUnsent(java.lang.Integer value) {
    this.recordsUnsent = value;
  }

  /**
   * Creates a new Application RecordBuilder.
   * @return A new Application RecordBuilder
   */
  public static org.radarcns.avro.restapi.app.Application.Builder newBuilder() {
    return new org.radarcns.avro.restapi.app.Application.Builder();
  }

  /**
   * Creates a new Application RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Application RecordBuilder
   */
  public static org.radarcns.avro.restapi.app.Application.Builder newBuilder(org.radarcns.avro.restapi.app.Application.Builder other) {
    return new org.radarcns.avro.restapi.app.Application.Builder(other);
  }

  /**
   * Creates a new Application RecordBuilder by copying an existing Application instance.
   * @param other The existing instance to copy.
   * @return A new Application RecordBuilder
   */
  public static org.radarcns.avro.restapi.app.Application.Builder newBuilder(org.radarcns.avro.restapi.app.Application other) {
    return new org.radarcns.avro.restapi.app.Application.Builder(other);
  }

  /**
   * RecordBuilder for Application instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Application>
    implements org.apache.avro.data.RecordBuilder<Application> {

    /** Hardware identifier of client application */
    private java.lang.String ipAddress;
    /** Time since last app start (s) */
    private double uptime;
    /** server connection status */
    private org.radarcns.avro.restapi.app.ServerStatus serverStatus;
    /** number of records currently being cached */
    private int recordsCached;
    /** number of records sent since application start */
    private int recordsSent;
    /** number of unsent records */
    private int recordsUnsent;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.radarcns.avro.restapi.app.Application.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.ipAddress)) {
        this.ipAddress = data().deepCopy(fields()[0].schema(), other.ipAddress);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.uptime)) {
        this.uptime = data().deepCopy(fields()[1].schema(), other.uptime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.serverStatus)) {
        this.serverStatus = data().deepCopy(fields()[2].schema(), other.serverStatus);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.recordsCached)) {
        this.recordsCached = data().deepCopy(fields()[3].schema(), other.recordsCached);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.recordsSent)) {
        this.recordsSent = data().deepCopy(fields()[4].schema(), other.recordsSent);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.recordsUnsent)) {
        this.recordsUnsent = data().deepCopy(fields()[5].schema(), other.recordsUnsent);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Application instance
     * @param other The existing instance to copy.
     */
    private Builder(org.radarcns.avro.restapi.app.Application other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.ipAddress)) {
        this.ipAddress = data().deepCopy(fields()[0].schema(), other.ipAddress);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.uptime)) {
        this.uptime = data().deepCopy(fields()[1].schema(), other.uptime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.serverStatus)) {
        this.serverStatus = data().deepCopy(fields()[2].schema(), other.serverStatus);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.recordsCached)) {
        this.recordsCached = data().deepCopy(fields()[3].schema(), other.recordsCached);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.recordsSent)) {
        this.recordsSent = data().deepCopy(fields()[4].schema(), other.recordsSent);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.recordsUnsent)) {
        this.recordsUnsent = data().deepCopy(fields()[5].schema(), other.recordsUnsent);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'ipAddress' field.
      * Hardware identifier of client application
      * @return The value.
      */
    public java.lang.String getIpAddress() {
      return ipAddress;
    }

    /**
      * Sets the value of the 'ipAddress' field.
      * Hardware identifier of client application
      * @param value The value of 'ipAddress'.
      * @return This builder.
      */
    public org.radarcns.avro.restapi.app.Application.Builder setIpAddress(java.lang.String value) {
      validate(fields()[0], value);
      this.ipAddress = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'ipAddress' field has been set.
      * Hardware identifier of client application
      * @return True if the 'ipAddress' field has been set, false otherwise.
      */
    public boolean hasIpAddress() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'ipAddress' field.
      * Hardware identifier of client application
      * @return This builder.
      */
    public org.radarcns.avro.restapi.app.Application.Builder clearIpAddress() {
      ipAddress = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'uptime' field.
      * Time since last app start (s)
      * @return The value.
      */
    public java.lang.Double getUptime() {
      return uptime;
    }

    /**
      * Sets the value of the 'uptime' field.
      * Time since last app start (s)
      * @param value The value of 'uptime'.
      * @return This builder.
      */
    public org.radarcns.avro.restapi.app.Application.Builder setUptime(double value) {
      validate(fields()[1], value);
      this.uptime = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'uptime' field has been set.
      * Time since last app start (s)
      * @return True if the 'uptime' field has been set, false otherwise.
      */
    public boolean hasUptime() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'uptime' field.
      * Time since last app start (s)
      * @return This builder.
      */
    public org.radarcns.avro.restapi.app.Application.Builder clearUptime() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'serverStatus' field.
      * server connection status
      * @return The value.
      */
    public org.radarcns.avro.restapi.app.ServerStatus getServerStatus() {
      return serverStatus;
    }

    /**
      * Sets the value of the 'serverStatus' field.
      * server connection status
      * @param value The value of 'serverStatus'.
      * @return This builder.
      */
    public org.radarcns.avro.restapi.app.Application.Builder setServerStatus(org.radarcns.avro.restapi.app.ServerStatus value) {
      validate(fields()[2], value);
      this.serverStatus = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'serverStatus' field has been set.
      * server connection status
      * @return True if the 'serverStatus' field has been set, false otherwise.
      */
    public boolean hasServerStatus() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'serverStatus' field.
      * server connection status
      * @return This builder.
      */
    public org.radarcns.avro.restapi.app.Application.Builder clearServerStatus() {
      serverStatus = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'recordsCached' field.
      * number of records currently being cached
      * @return The value.
      */
    public java.lang.Integer getRecordsCached() {
      return recordsCached;
    }

    /**
      * Sets the value of the 'recordsCached' field.
      * number of records currently being cached
      * @param value The value of 'recordsCached'.
      * @return This builder.
      */
    public org.radarcns.avro.restapi.app.Application.Builder setRecordsCached(int value) {
      validate(fields()[3], value);
      this.recordsCached = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'recordsCached' field has been set.
      * number of records currently being cached
      * @return True if the 'recordsCached' field has been set, false otherwise.
      */
    public boolean hasRecordsCached() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'recordsCached' field.
      * number of records currently being cached
      * @return This builder.
      */
    public org.radarcns.avro.restapi.app.Application.Builder clearRecordsCached() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'recordsSent' field.
      * number of records sent since application start
      * @return The value.
      */
    public java.lang.Integer getRecordsSent() {
      return recordsSent;
    }

    /**
      * Sets the value of the 'recordsSent' field.
      * number of records sent since application start
      * @param value The value of 'recordsSent'.
      * @return This builder.
      */
    public org.radarcns.avro.restapi.app.Application.Builder setRecordsSent(int value) {
      validate(fields()[4], value);
      this.recordsSent = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'recordsSent' field has been set.
      * number of records sent since application start
      * @return True if the 'recordsSent' field has been set, false otherwise.
      */
    public boolean hasRecordsSent() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'recordsSent' field.
      * number of records sent since application start
      * @return This builder.
      */
    public org.radarcns.avro.restapi.app.Application.Builder clearRecordsSent() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'recordsUnsent' field.
      * number of unsent records
      * @return The value.
      */
    public java.lang.Integer getRecordsUnsent() {
      return recordsUnsent;
    }

    /**
      * Sets the value of the 'recordsUnsent' field.
      * number of unsent records
      * @param value The value of 'recordsUnsent'.
      * @return This builder.
      */
    public org.radarcns.avro.restapi.app.Application.Builder setRecordsUnsent(int value) {
      validate(fields()[5], value);
      this.recordsUnsent = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'recordsUnsent' field has been set.
      * number of unsent records
      * @return True if the 'recordsUnsent' field has been set, false otherwise.
      */
    public boolean hasRecordsUnsent() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'recordsUnsent' field.
      * number of unsent records
      * @return This builder.
      */
    public org.radarcns.avro.restapi.app.Application.Builder clearRecordsUnsent() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public Application build() {
      try {
        Application record = new Application();
        record.ipAddress = fieldSetFlags()[0] ? this.ipAddress : (java.lang.String) defaultValue(fields()[0]);
        record.uptime = fieldSetFlags()[1] ? this.uptime : (java.lang.Double) defaultValue(fields()[1]);
        record.serverStatus = fieldSetFlags()[2] ? this.serverStatus : (org.radarcns.avro.restapi.app.ServerStatus) defaultValue(fields()[2]);
        record.recordsCached = fieldSetFlags()[3] ? this.recordsCached : (java.lang.Integer) defaultValue(fields()[3]);
        record.recordsSent = fieldSetFlags()[4] ? this.recordsSent : (java.lang.Integer) defaultValue(fields()[4]);
        record.recordsUnsent = fieldSetFlags()[5] ? this.recordsUnsent : (java.lang.Integer) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
