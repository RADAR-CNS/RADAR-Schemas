/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.radarcns.avro.restapi.user;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** Patient definition */
@org.apache.avro.specific.AvroGenerated
public class Patient extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8188772836521582254L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Patient\",\"namespace\":\"org.radarcns.avro.restapi.user\",\"doc\":\"Patient definition\",\"fields\":[{\"name\":\"userId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"User identifier\"},{\"name\":\"sources\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Source\",\"namespace\":\"org.radarcns.avro.restapi.source\",\"doc\":\"Source details\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Source id\"},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"SourceType\",\"doc\":\"All available sources\",\"symbols\":[\"ANDROID\",\"EMPATICA\",\"PEBBLE\",\"BIOVOTION\"]},\"doc\":\"Source name\"},{\"name\":\"summary\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"SourceSummary\",\"doc\":\"Details about the source with details for each sensor\",\"fields\":[{\"name\":\"state\",\"type\":{\"type\":\"enum\",\"name\":\"State\",\"doc\":\"Set of device status\",\"symbols\":[\"FINE\",\"OK\",\"WARNING\",\"DISCONNECTED\",\"UNKNOWN\"]},\"doc\":\"Current source state computed using the received data\",\"default\":\"UNKNOWN\"},{\"name\":\"receivedMessage\",\"type\":\"int\",\"doc\":\"Amount of received messages\",\"default\":-1},{\"name\":\"messageLoss\",\"type\":\"double\",\"doc\":\"Percentage of lost messages\",\"default\":-1.0},{\"name\":\"sensors\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"record\",\"name\":\"Sensor\",\"namespace\":\"org.radarcns.avro.restapi.sensor\",\"doc\":\"Sensor details\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"enum\",\"name\":\"SensorType\",\"doc\":\"Set of sensor type\",\"symbols\":[\"ACCELEROMETER\",\"BATTERY\",\"BLOOD_VOLUME_PULSE\",\"ELECTRODERMAL_ACTIVITY\",\"INTER_BEAT_INTERVAL\",\"HEART_RATE\",\"THERMOMETER\"]},\"doc\":\"Sensor name\"},{\"name\":\"state\",\"type\":\"org.radarcns.avro.restapi.source.State\",\"doc\":\"Current sensor state computed using the received data\",\"default\":\"UNKNOWN\"},{\"name\":\"receivedMessage\",\"type\":\"int\",\"doc\":\"Amount of received messages\",\"default\":-1},{\"name\":\"messageLoss\",\"type\":\"double\",\"doc\":\"Percentage of lost messages\",\"default\":-1.0}]},\"avro.java.string\":\"String\"}}]}],\"doc\":\"Source details\",\"default\":null}]}},\"doc\":\"List of all sources used by the Patient\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** User identifier */
  @Deprecated public java.lang.String userId;
  /** List of all sources used by the Patient */
  @Deprecated public java.util.List<org.radarcns.avro.restapi.source.Source> sources;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Patient() {}

  /**
   * All-args constructor.
   * @param userId User identifier
   * @param sources List of all sources used by the Patient
   */
  public Patient(java.lang.String userId, java.util.List<org.radarcns.avro.restapi.source.Source> sources) {
    this.userId = userId;
    this.sources = sources;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return userId;
    case 1: return sources;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: userId = (java.lang.String)value$; break;
    case 1: sources = (java.util.List<org.radarcns.avro.restapi.source.Source>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'userId' field.
   * @return User identifier
   */
  public java.lang.String getUserId() {
    return userId;
  }

  /**
   * Sets the value of the 'userId' field.
   * User identifier
   * @param value the value to set.
   */
  public void setUserId(java.lang.String value) {
    this.userId = value;
  }

  /**
   * Gets the value of the 'sources' field.
   * @return List of all sources used by the Patient
   */
  public java.util.List<org.radarcns.avro.restapi.source.Source> getSources() {
    return sources;
  }

  /**
   * Sets the value of the 'sources' field.
   * List of all sources used by the Patient
   * @param value the value to set.
   */
  public void setSources(java.util.List<org.radarcns.avro.restapi.source.Source> value) {
    this.sources = value;
  }

  /**
   * Creates a new Patient RecordBuilder.
   * @return A new Patient RecordBuilder
   */
  public static org.radarcns.avro.restapi.user.Patient.Builder newBuilder() {
    return new org.radarcns.avro.restapi.user.Patient.Builder();
  }

  /**
   * Creates a new Patient RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Patient RecordBuilder
   */
  public static org.radarcns.avro.restapi.user.Patient.Builder newBuilder(org.radarcns.avro.restapi.user.Patient.Builder other) {
    return new org.radarcns.avro.restapi.user.Patient.Builder(other);
  }

  /**
   * Creates a new Patient RecordBuilder by copying an existing Patient instance.
   * @param other The existing instance to copy.
   * @return A new Patient RecordBuilder
   */
  public static org.radarcns.avro.restapi.user.Patient.Builder newBuilder(org.radarcns.avro.restapi.user.Patient other) {
    return new org.radarcns.avro.restapi.user.Patient.Builder(other);
  }

  /**
   * RecordBuilder for Patient instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Patient>
    implements org.apache.avro.data.RecordBuilder<Patient> {

    /** User identifier */
    private java.lang.String userId;
    /** List of all sources used by the Patient */
    private java.util.List<org.radarcns.avro.restapi.source.Source> sources;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.radarcns.avro.restapi.user.Patient.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.userId)) {
        this.userId = data().deepCopy(fields()[0].schema(), other.userId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sources)) {
        this.sources = data().deepCopy(fields()[1].schema(), other.sources);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Patient instance
     * @param other The existing instance to copy.
     */
    private Builder(org.radarcns.avro.restapi.user.Patient other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.userId)) {
        this.userId = data().deepCopy(fields()[0].schema(), other.userId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sources)) {
        this.sources = data().deepCopy(fields()[1].schema(), other.sources);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'userId' field.
      * User identifier
      * @return The value.
      */
    public java.lang.String getUserId() {
      return userId;
    }

    /**
      * Sets the value of the 'userId' field.
      * User identifier
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public org.radarcns.avro.restapi.user.Patient.Builder setUserId(java.lang.String value) {
      validate(fields()[0], value);
      this.userId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * User identifier
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'userId' field.
      * User identifier
      * @return This builder.
      */
    public org.radarcns.avro.restapi.user.Patient.Builder clearUserId() {
      userId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'sources' field.
      * List of all sources used by the Patient
      * @return The value.
      */
    public java.util.List<org.radarcns.avro.restapi.source.Source> getSources() {
      return sources;
    }

    /**
      * Sets the value of the 'sources' field.
      * List of all sources used by the Patient
      * @param value The value of 'sources'.
      * @return This builder.
      */
    public org.radarcns.avro.restapi.user.Patient.Builder setSources(java.util.List<org.radarcns.avro.restapi.source.Source> value) {
      validate(fields()[1], value);
      this.sources = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'sources' field has been set.
      * List of all sources used by the Patient
      * @return True if the 'sources' field has been set, false otherwise.
      */
    public boolean hasSources() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'sources' field.
      * List of all sources used by the Patient
      * @return This builder.
      */
    public org.radarcns.avro.restapi.user.Patient.Builder clearSources() {
      sources = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public Patient build() {
      try {
        Patient record = new Patient();
        record.userId = fieldSetFlags()[0] ? this.userId : (java.lang.String) defaultValue(fields()[0]);
        record.sources = fieldSetFlags()[1] ? this.sources : (java.util.List<org.radarcns.avro.restapi.source.Source>) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
