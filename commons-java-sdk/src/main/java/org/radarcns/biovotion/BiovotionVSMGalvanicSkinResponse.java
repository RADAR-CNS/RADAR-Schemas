/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.radarcns.biovotion;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** Raw galvanic skin response data. */
@org.apache.avro.specific.AvroGenerated
public class BiovotionVSMGalvanicSkinResponse extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -618488880249817449L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BiovotionVSMGalvanicSkinResponse\",\"namespace\":\"org.radarcns.biovotion\",\"doc\":\"Raw galvanic skin response data.\",\"fields\":[{\"name\":\"time\",\"type\":\"double\",\"doc\":\"device timestamp in UTC (s)\"},{\"name\":\"timeReceived\",\"type\":\"double\",\"doc\":\"device receiver timestamp in UTC (s)\"},{\"name\":\"galvanicSkinResponseAmplitude\",\"type\":\"float\",\"doc\":\"gsr amplitude (kOhm)\"},{\"name\":\"galvanicSkinResponsePhase\",\"type\":\"float\",\"doc\":\"gsr phase\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** device timestamp in UTC (s) */
  @Deprecated public double time;
  /** device receiver timestamp in UTC (s) */
  @Deprecated public double timeReceived;
  /** gsr amplitude (kOhm) */
  @Deprecated public float galvanicSkinResponseAmplitude;
  /** gsr phase */
  @Deprecated public float galvanicSkinResponsePhase;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public BiovotionVSMGalvanicSkinResponse() {}

  /**
   * All-args constructor.
   * @param time device timestamp in UTC (s)
   * @param timeReceived device receiver timestamp in UTC (s)
   * @param galvanicSkinResponseAmplitude gsr amplitude (kOhm)
   * @param galvanicSkinResponsePhase gsr phase
   */
  public BiovotionVSMGalvanicSkinResponse(java.lang.Double time, java.lang.Double timeReceived, java.lang.Float galvanicSkinResponseAmplitude, java.lang.Float galvanicSkinResponsePhase) {
    this.time = time;
    this.timeReceived = timeReceived;
    this.galvanicSkinResponseAmplitude = galvanicSkinResponseAmplitude;
    this.galvanicSkinResponsePhase = galvanicSkinResponsePhase;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return time;
    case 1: return timeReceived;
    case 2: return galvanicSkinResponseAmplitude;
    case 3: return galvanicSkinResponsePhase;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: time = (java.lang.Double)value$; break;
    case 1: timeReceived = (java.lang.Double)value$; break;
    case 2: galvanicSkinResponseAmplitude = (java.lang.Float)value$; break;
    case 3: galvanicSkinResponsePhase = (java.lang.Float)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'time' field.
   * @return device timestamp in UTC (s)
   */
  public java.lang.Double getTime() {
    return time;
  }

  /**
   * Sets the value of the 'time' field.
   * device timestamp in UTC (s)
   * @param value the value to set.
   */
  public void setTime(java.lang.Double value) {
    this.time = value;
  }

  /**
   * Gets the value of the 'timeReceived' field.
   * @return device receiver timestamp in UTC (s)
   */
  public java.lang.Double getTimeReceived() {
    return timeReceived;
  }

  /**
   * Sets the value of the 'timeReceived' field.
   * device receiver timestamp in UTC (s)
   * @param value the value to set.
   */
  public void setTimeReceived(java.lang.Double value) {
    this.timeReceived = value;
  }

  /**
   * Gets the value of the 'galvanicSkinResponseAmplitude' field.
   * @return gsr amplitude (kOhm)
   */
  public java.lang.Float getGalvanicSkinResponseAmplitude() {
    return galvanicSkinResponseAmplitude;
  }

  /**
   * Sets the value of the 'galvanicSkinResponseAmplitude' field.
   * gsr amplitude (kOhm)
   * @param value the value to set.
   */
  public void setGalvanicSkinResponseAmplitude(java.lang.Float value) {
    this.galvanicSkinResponseAmplitude = value;
  }

  /**
   * Gets the value of the 'galvanicSkinResponsePhase' field.
   * @return gsr phase
   */
  public java.lang.Float getGalvanicSkinResponsePhase() {
    return galvanicSkinResponsePhase;
  }

  /**
   * Sets the value of the 'galvanicSkinResponsePhase' field.
   * gsr phase
   * @param value the value to set.
   */
  public void setGalvanicSkinResponsePhase(java.lang.Float value) {
    this.galvanicSkinResponsePhase = value;
  }

  /**
   * Creates a new BiovotionVSMGalvanicSkinResponse RecordBuilder.
   * @return A new BiovotionVSMGalvanicSkinResponse RecordBuilder
   */
  public static org.radarcns.biovotion.BiovotionVSMGalvanicSkinResponse.Builder newBuilder() {
    return new org.radarcns.biovotion.BiovotionVSMGalvanicSkinResponse.Builder();
  }

  /**
   * Creates a new BiovotionVSMGalvanicSkinResponse RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new BiovotionVSMGalvanicSkinResponse RecordBuilder
   */
  public static org.radarcns.biovotion.BiovotionVSMGalvanicSkinResponse.Builder newBuilder(org.radarcns.biovotion.BiovotionVSMGalvanicSkinResponse.Builder other) {
    return new org.radarcns.biovotion.BiovotionVSMGalvanicSkinResponse.Builder(other);
  }

  /**
   * Creates a new BiovotionVSMGalvanicSkinResponse RecordBuilder by copying an existing BiovotionVSMGalvanicSkinResponse instance.
   * @param other The existing instance to copy.
   * @return A new BiovotionVSMGalvanicSkinResponse RecordBuilder
   */
  public static org.radarcns.biovotion.BiovotionVSMGalvanicSkinResponse.Builder newBuilder(org.radarcns.biovotion.BiovotionVSMGalvanicSkinResponse other) {
    return new org.radarcns.biovotion.BiovotionVSMGalvanicSkinResponse.Builder(other);
  }

  /**
   * RecordBuilder for BiovotionVSMGalvanicSkinResponse instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BiovotionVSMGalvanicSkinResponse>
    implements org.apache.avro.data.RecordBuilder<BiovotionVSMGalvanicSkinResponse> {

    /** device timestamp in UTC (s) */
    private double time;
    /** device receiver timestamp in UTC (s) */
    private double timeReceived;
    /** gsr amplitude (kOhm) */
    private float galvanicSkinResponseAmplitude;
    /** gsr phase */
    private float galvanicSkinResponsePhase;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.radarcns.biovotion.BiovotionVSMGalvanicSkinResponse.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.time)) {
        this.time = data().deepCopy(fields()[0].schema(), other.time);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timeReceived)) {
        this.timeReceived = data().deepCopy(fields()[1].schema(), other.timeReceived);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.galvanicSkinResponseAmplitude)) {
        this.galvanicSkinResponseAmplitude = data().deepCopy(fields()[2].schema(), other.galvanicSkinResponseAmplitude);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.galvanicSkinResponsePhase)) {
        this.galvanicSkinResponsePhase = data().deepCopy(fields()[3].schema(), other.galvanicSkinResponsePhase);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing BiovotionVSMGalvanicSkinResponse instance
     * @param other The existing instance to copy.
     */
    private Builder(org.radarcns.biovotion.BiovotionVSMGalvanicSkinResponse other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.time)) {
        this.time = data().deepCopy(fields()[0].schema(), other.time);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timeReceived)) {
        this.timeReceived = data().deepCopy(fields()[1].schema(), other.timeReceived);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.galvanicSkinResponseAmplitude)) {
        this.galvanicSkinResponseAmplitude = data().deepCopy(fields()[2].schema(), other.galvanicSkinResponseAmplitude);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.galvanicSkinResponsePhase)) {
        this.galvanicSkinResponsePhase = data().deepCopy(fields()[3].schema(), other.galvanicSkinResponsePhase);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'time' field.
      * device timestamp in UTC (s)
      * @return The value.
      */
    public java.lang.Double getTime() {
      return time;
    }

    /**
      * Sets the value of the 'time' field.
      * device timestamp in UTC (s)
      * @param value The value of 'time'.
      * @return This builder.
      */
    public org.radarcns.biovotion.BiovotionVSMGalvanicSkinResponse.Builder setTime(double value) {
      validate(fields()[0], value);
      this.time = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'time' field has been set.
      * device timestamp in UTC (s)
      * @return True if the 'time' field has been set, false otherwise.
      */
    public boolean hasTime() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'time' field.
      * device timestamp in UTC (s)
      * @return This builder.
      */
    public org.radarcns.biovotion.BiovotionVSMGalvanicSkinResponse.Builder clearTime() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'timeReceived' field.
      * device receiver timestamp in UTC (s)
      * @return The value.
      */
    public java.lang.Double getTimeReceived() {
      return timeReceived;
    }

    /**
      * Sets the value of the 'timeReceived' field.
      * device receiver timestamp in UTC (s)
      * @param value The value of 'timeReceived'.
      * @return This builder.
      */
    public org.radarcns.biovotion.BiovotionVSMGalvanicSkinResponse.Builder setTimeReceived(double value) {
      validate(fields()[1], value);
      this.timeReceived = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'timeReceived' field has been set.
      * device receiver timestamp in UTC (s)
      * @return True if the 'timeReceived' field has been set, false otherwise.
      */
    public boolean hasTimeReceived() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'timeReceived' field.
      * device receiver timestamp in UTC (s)
      * @return This builder.
      */
    public org.radarcns.biovotion.BiovotionVSMGalvanicSkinResponse.Builder clearTimeReceived() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'galvanicSkinResponseAmplitude' field.
      * gsr amplitude (kOhm)
      * @return The value.
      */
    public java.lang.Float getGalvanicSkinResponseAmplitude() {
      return galvanicSkinResponseAmplitude;
    }

    /**
      * Sets the value of the 'galvanicSkinResponseAmplitude' field.
      * gsr amplitude (kOhm)
      * @param value The value of 'galvanicSkinResponseAmplitude'.
      * @return This builder.
      */
    public org.radarcns.biovotion.BiovotionVSMGalvanicSkinResponse.Builder setGalvanicSkinResponseAmplitude(float value) {
      validate(fields()[2], value);
      this.galvanicSkinResponseAmplitude = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'galvanicSkinResponseAmplitude' field has been set.
      * gsr amplitude (kOhm)
      * @return True if the 'galvanicSkinResponseAmplitude' field has been set, false otherwise.
      */
    public boolean hasGalvanicSkinResponseAmplitude() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'galvanicSkinResponseAmplitude' field.
      * gsr amplitude (kOhm)
      * @return This builder.
      */
    public org.radarcns.biovotion.BiovotionVSMGalvanicSkinResponse.Builder clearGalvanicSkinResponseAmplitude() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'galvanicSkinResponsePhase' field.
      * gsr phase
      * @return The value.
      */
    public java.lang.Float getGalvanicSkinResponsePhase() {
      return galvanicSkinResponsePhase;
    }

    /**
      * Sets the value of the 'galvanicSkinResponsePhase' field.
      * gsr phase
      * @param value The value of 'galvanicSkinResponsePhase'.
      * @return This builder.
      */
    public org.radarcns.biovotion.BiovotionVSMGalvanicSkinResponse.Builder setGalvanicSkinResponsePhase(float value) {
      validate(fields()[3], value);
      this.galvanicSkinResponsePhase = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'galvanicSkinResponsePhase' field has been set.
      * gsr phase
      * @return True if the 'galvanicSkinResponsePhase' field has been set, false otherwise.
      */
    public boolean hasGalvanicSkinResponsePhase() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'galvanicSkinResponsePhase' field.
      * gsr phase
      * @return This builder.
      */
    public org.radarcns.biovotion.BiovotionVSMGalvanicSkinResponse.Builder clearGalvanicSkinResponsePhase() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public BiovotionVSMGalvanicSkinResponse build() {
      try {
        BiovotionVSMGalvanicSkinResponse record = new BiovotionVSMGalvanicSkinResponse();
        record.time = fieldSetFlags()[0] ? this.time : (java.lang.Double) defaultValue(fields()[0]);
        record.timeReceived = fieldSetFlags()[1] ? this.timeReceived : (java.lang.Double) defaultValue(fields()[1]);
        record.galvanicSkinResponseAmplitude = fieldSetFlags()[2] ? this.galvanicSkinResponseAmplitude : (java.lang.Float) defaultValue(fields()[2]);
        record.galvanicSkinResponsePhase = fieldSetFlags()[3] ? this.galvanicSkinResponsePhase : (java.lang.Float) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
