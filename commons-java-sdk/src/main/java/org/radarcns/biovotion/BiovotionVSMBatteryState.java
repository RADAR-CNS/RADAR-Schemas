/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.radarcns.biovotion;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** Device battery state. */
@org.apache.avro.specific.AvroGenerated
public class BiovotionVSMBatteryState extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5139168887766682054L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BiovotionVSMBatteryState\",\"namespace\":\"org.radarcns.biovotion\",\"doc\":\"Device battery state.\",\"fields\":[{\"name\":\"time\",\"type\":\"double\",\"doc\":\"device timestamp in UTC (s)\"},{\"name\":\"timeReceived\",\"type\":\"double\",\"doc\":\"device receiver timestamp in UTC (s)\"},{\"name\":\"batteryLevel\",\"type\":\"float\",\"doc\":\"battery level (0-1)\"},{\"name\":\"batteryChargeRate\",\"type\":\"float\",\"doc\":\"battery charge rate (0-1)\"},{\"name\":\"batteryVoltage\",\"type\":\"float\",\"doc\":\"battery voltage (V)\"},{\"name\":\"batteryStatus\",\"type\":\"float\",\"doc\":\"battery status\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** device timestamp in UTC (s) */
  @Deprecated public double time;
  /** device receiver timestamp in UTC (s) */
  @Deprecated public double timeReceived;
  /** battery level (0-1) */
  @Deprecated public float batteryLevel;
  /** battery charge rate (0-1) */
  @Deprecated public float batteryChargeRate;
  /** battery voltage (V) */
  @Deprecated public float batteryVoltage;
  /** battery status */
  @Deprecated public float batteryStatus;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public BiovotionVSMBatteryState() {}

  /**
   * All-args constructor.
   * @param time device timestamp in UTC (s)
   * @param timeReceived device receiver timestamp in UTC (s)
   * @param batteryLevel battery level (0-1)
   * @param batteryChargeRate battery charge rate (0-1)
   * @param batteryVoltage battery voltage (V)
   * @param batteryStatus battery status
   */
  public BiovotionVSMBatteryState(java.lang.Double time, java.lang.Double timeReceived, java.lang.Float batteryLevel, java.lang.Float batteryChargeRate, java.lang.Float batteryVoltage, java.lang.Float batteryStatus) {
    this.time = time;
    this.timeReceived = timeReceived;
    this.batteryLevel = batteryLevel;
    this.batteryChargeRate = batteryChargeRate;
    this.batteryVoltage = batteryVoltage;
    this.batteryStatus = batteryStatus;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return time;
    case 1: return timeReceived;
    case 2: return batteryLevel;
    case 3: return batteryChargeRate;
    case 4: return batteryVoltage;
    case 5: return batteryStatus;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: time = (java.lang.Double)value$; break;
    case 1: timeReceived = (java.lang.Double)value$; break;
    case 2: batteryLevel = (java.lang.Float)value$; break;
    case 3: batteryChargeRate = (java.lang.Float)value$; break;
    case 4: batteryVoltage = (java.lang.Float)value$; break;
    case 5: batteryStatus = (java.lang.Float)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'time' field.
   * @return device timestamp in UTC (s)
   */
  public java.lang.Double getTime() {
    return time;
  }

  /**
   * Sets the value of the 'time' field.
   * device timestamp in UTC (s)
   * @param value the value to set.
   */
  public void setTime(java.lang.Double value) {
    this.time = value;
  }

  /**
   * Gets the value of the 'timeReceived' field.
   * @return device receiver timestamp in UTC (s)
   */
  public java.lang.Double getTimeReceived() {
    return timeReceived;
  }

  /**
   * Sets the value of the 'timeReceived' field.
   * device receiver timestamp in UTC (s)
   * @param value the value to set.
   */
  public void setTimeReceived(java.lang.Double value) {
    this.timeReceived = value;
  }

  /**
   * Gets the value of the 'batteryLevel' field.
   * @return battery level (0-1)
   */
  public java.lang.Float getBatteryLevel() {
    return batteryLevel;
  }

  /**
   * Sets the value of the 'batteryLevel' field.
   * battery level (0-1)
   * @param value the value to set.
   */
  public void setBatteryLevel(java.lang.Float value) {
    this.batteryLevel = value;
  }

  /**
   * Gets the value of the 'batteryChargeRate' field.
   * @return battery charge rate (0-1)
   */
  public java.lang.Float getBatteryChargeRate() {
    return batteryChargeRate;
  }

  /**
   * Sets the value of the 'batteryChargeRate' field.
   * battery charge rate (0-1)
   * @param value the value to set.
   */
  public void setBatteryChargeRate(java.lang.Float value) {
    this.batteryChargeRate = value;
  }

  /**
   * Gets the value of the 'batteryVoltage' field.
   * @return battery voltage (V)
   */
  public java.lang.Float getBatteryVoltage() {
    return batteryVoltage;
  }

  /**
   * Sets the value of the 'batteryVoltage' field.
   * battery voltage (V)
   * @param value the value to set.
   */
  public void setBatteryVoltage(java.lang.Float value) {
    this.batteryVoltage = value;
  }

  /**
   * Gets the value of the 'batteryStatus' field.
   * @return battery status
   */
  public java.lang.Float getBatteryStatus() {
    return batteryStatus;
  }

  /**
   * Sets the value of the 'batteryStatus' field.
   * battery status
   * @param value the value to set.
   */
  public void setBatteryStatus(java.lang.Float value) {
    this.batteryStatus = value;
  }

  /**
   * Creates a new BiovotionVSMBatteryState RecordBuilder.
   * @return A new BiovotionVSMBatteryState RecordBuilder
   */
  public static org.radarcns.biovotion.BiovotionVSMBatteryState.Builder newBuilder() {
    return new org.radarcns.biovotion.BiovotionVSMBatteryState.Builder();
  }

  /**
   * Creates a new BiovotionVSMBatteryState RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new BiovotionVSMBatteryState RecordBuilder
   */
  public static org.radarcns.biovotion.BiovotionVSMBatteryState.Builder newBuilder(org.radarcns.biovotion.BiovotionVSMBatteryState.Builder other) {
    return new org.radarcns.biovotion.BiovotionVSMBatteryState.Builder(other);
  }

  /**
   * Creates a new BiovotionVSMBatteryState RecordBuilder by copying an existing BiovotionVSMBatteryState instance.
   * @param other The existing instance to copy.
   * @return A new BiovotionVSMBatteryState RecordBuilder
   */
  public static org.radarcns.biovotion.BiovotionVSMBatteryState.Builder newBuilder(org.radarcns.biovotion.BiovotionVSMBatteryState other) {
    return new org.radarcns.biovotion.BiovotionVSMBatteryState.Builder(other);
  }

  /**
   * RecordBuilder for BiovotionVSMBatteryState instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BiovotionVSMBatteryState>
    implements org.apache.avro.data.RecordBuilder<BiovotionVSMBatteryState> {

    /** device timestamp in UTC (s) */
    private double time;
    /** device receiver timestamp in UTC (s) */
    private double timeReceived;
    /** battery level (0-1) */
    private float batteryLevel;
    /** battery charge rate (0-1) */
    private float batteryChargeRate;
    /** battery voltage (V) */
    private float batteryVoltage;
    /** battery status */
    private float batteryStatus;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.radarcns.biovotion.BiovotionVSMBatteryState.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.time)) {
        this.time = data().deepCopy(fields()[0].schema(), other.time);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timeReceived)) {
        this.timeReceived = data().deepCopy(fields()[1].schema(), other.timeReceived);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.batteryLevel)) {
        this.batteryLevel = data().deepCopy(fields()[2].schema(), other.batteryLevel);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.batteryChargeRate)) {
        this.batteryChargeRate = data().deepCopy(fields()[3].schema(), other.batteryChargeRate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.batteryVoltage)) {
        this.batteryVoltage = data().deepCopy(fields()[4].schema(), other.batteryVoltage);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.batteryStatus)) {
        this.batteryStatus = data().deepCopy(fields()[5].schema(), other.batteryStatus);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing BiovotionVSMBatteryState instance
     * @param other The existing instance to copy.
     */
    private Builder(org.radarcns.biovotion.BiovotionVSMBatteryState other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.time)) {
        this.time = data().deepCopy(fields()[0].schema(), other.time);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timeReceived)) {
        this.timeReceived = data().deepCopy(fields()[1].schema(), other.timeReceived);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.batteryLevel)) {
        this.batteryLevel = data().deepCopy(fields()[2].schema(), other.batteryLevel);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.batteryChargeRate)) {
        this.batteryChargeRate = data().deepCopy(fields()[3].schema(), other.batteryChargeRate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.batteryVoltage)) {
        this.batteryVoltage = data().deepCopy(fields()[4].schema(), other.batteryVoltage);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.batteryStatus)) {
        this.batteryStatus = data().deepCopy(fields()[5].schema(), other.batteryStatus);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'time' field.
      * device timestamp in UTC (s)
      * @return The value.
      */
    public java.lang.Double getTime() {
      return time;
    }

    /**
      * Sets the value of the 'time' field.
      * device timestamp in UTC (s)
      * @param value The value of 'time'.
      * @return This builder.
      */
    public org.radarcns.biovotion.BiovotionVSMBatteryState.Builder setTime(double value) {
      validate(fields()[0], value);
      this.time = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'time' field has been set.
      * device timestamp in UTC (s)
      * @return True if the 'time' field has been set, false otherwise.
      */
    public boolean hasTime() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'time' field.
      * device timestamp in UTC (s)
      * @return This builder.
      */
    public org.radarcns.biovotion.BiovotionVSMBatteryState.Builder clearTime() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'timeReceived' field.
      * device receiver timestamp in UTC (s)
      * @return The value.
      */
    public java.lang.Double getTimeReceived() {
      return timeReceived;
    }

    /**
      * Sets the value of the 'timeReceived' field.
      * device receiver timestamp in UTC (s)
      * @param value The value of 'timeReceived'.
      * @return This builder.
      */
    public org.radarcns.biovotion.BiovotionVSMBatteryState.Builder setTimeReceived(double value) {
      validate(fields()[1], value);
      this.timeReceived = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'timeReceived' field has been set.
      * device receiver timestamp in UTC (s)
      * @return True if the 'timeReceived' field has been set, false otherwise.
      */
    public boolean hasTimeReceived() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'timeReceived' field.
      * device receiver timestamp in UTC (s)
      * @return This builder.
      */
    public org.radarcns.biovotion.BiovotionVSMBatteryState.Builder clearTimeReceived() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'batteryLevel' field.
      * battery level (0-1)
      * @return The value.
      */
    public java.lang.Float getBatteryLevel() {
      return batteryLevel;
    }

    /**
      * Sets the value of the 'batteryLevel' field.
      * battery level (0-1)
      * @param value The value of 'batteryLevel'.
      * @return This builder.
      */
    public org.radarcns.biovotion.BiovotionVSMBatteryState.Builder setBatteryLevel(float value) {
      validate(fields()[2], value);
      this.batteryLevel = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'batteryLevel' field has been set.
      * battery level (0-1)
      * @return True if the 'batteryLevel' field has been set, false otherwise.
      */
    public boolean hasBatteryLevel() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'batteryLevel' field.
      * battery level (0-1)
      * @return This builder.
      */
    public org.radarcns.biovotion.BiovotionVSMBatteryState.Builder clearBatteryLevel() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'batteryChargeRate' field.
      * battery charge rate (0-1)
      * @return The value.
      */
    public java.lang.Float getBatteryChargeRate() {
      return batteryChargeRate;
    }

    /**
      * Sets the value of the 'batteryChargeRate' field.
      * battery charge rate (0-1)
      * @param value The value of 'batteryChargeRate'.
      * @return This builder.
      */
    public org.radarcns.biovotion.BiovotionVSMBatteryState.Builder setBatteryChargeRate(float value) {
      validate(fields()[3], value);
      this.batteryChargeRate = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'batteryChargeRate' field has been set.
      * battery charge rate (0-1)
      * @return True if the 'batteryChargeRate' field has been set, false otherwise.
      */
    public boolean hasBatteryChargeRate() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'batteryChargeRate' field.
      * battery charge rate (0-1)
      * @return This builder.
      */
    public org.radarcns.biovotion.BiovotionVSMBatteryState.Builder clearBatteryChargeRate() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'batteryVoltage' field.
      * battery voltage (V)
      * @return The value.
      */
    public java.lang.Float getBatteryVoltage() {
      return batteryVoltage;
    }

    /**
      * Sets the value of the 'batteryVoltage' field.
      * battery voltage (V)
      * @param value The value of 'batteryVoltage'.
      * @return This builder.
      */
    public org.radarcns.biovotion.BiovotionVSMBatteryState.Builder setBatteryVoltage(float value) {
      validate(fields()[4], value);
      this.batteryVoltage = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'batteryVoltage' field has been set.
      * battery voltage (V)
      * @return True if the 'batteryVoltage' field has been set, false otherwise.
      */
    public boolean hasBatteryVoltage() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'batteryVoltage' field.
      * battery voltage (V)
      * @return This builder.
      */
    public org.radarcns.biovotion.BiovotionVSMBatteryState.Builder clearBatteryVoltage() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'batteryStatus' field.
      * battery status
      * @return The value.
      */
    public java.lang.Float getBatteryStatus() {
      return batteryStatus;
    }

    /**
      * Sets the value of the 'batteryStatus' field.
      * battery status
      * @param value The value of 'batteryStatus'.
      * @return This builder.
      */
    public org.radarcns.biovotion.BiovotionVSMBatteryState.Builder setBatteryStatus(float value) {
      validate(fields()[5], value);
      this.batteryStatus = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'batteryStatus' field has been set.
      * battery status
      * @return True if the 'batteryStatus' field has been set, false otherwise.
      */
    public boolean hasBatteryStatus() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'batteryStatus' field.
      * battery status
      * @return This builder.
      */
    public org.radarcns.biovotion.BiovotionVSMBatteryState.Builder clearBatteryStatus() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public BiovotionVSMBatteryState build() {
      try {
        BiovotionVSMBatteryState record = new BiovotionVSMBatteryState();
        record.time = fieldSetFlags()[0] ? this.time : (java.lang.Double) defaultValue(fields()[0]);
        record.timeReceived = fieldSetFlags()[1] ? this.timeReceived : (java.lang.Double) defaultValue(fields()[1]);
        record.batteryLevel = fieldSetFlags()[2] ? this.batteryLevel : (java.lang.Float) defaultValue(fields()[2]);
        record.batteryChargeRate = fieldSetFlags()[3] ? this.batteryChargeRate : (java.lang.Float) defaultValue(fields()[3]);
        record.batteryVoltage = fieldSetFlags()[4] ? this.batteryVoltage : (java.lang.Float) defaultValue(fields()[4]);
        record.batteryStatus = fieldSetFlags()[5] ? this.batteryStatus : (java.lang.Float) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
