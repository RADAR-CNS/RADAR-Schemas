/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.radarcns.biovotion;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** Energy expenditure data calculated by biovotion device. */
@org.apache.avro.specific.AvroGenerated
public class BiovotionVSMEnergy extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1363587689849399004L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BiovotionVSMEnergy\",\"namespace\":\"org.radarcns.biovotion\",\"doc\":\"Energy expenditure data calculated by biovotion device.\",\"fields\":[{\"name\":\"time\",\"type\":\"double\",\"doc\":\"device timestamp in UTC (s)\"},{\"name\":\"timeReceived\",\"type\":\"double\",\"doc\":\"device receiver timestamp in UTC (s)\"},{\"name\":\"energyExpenditure\",\"type\":\"float\",\"doc\":\"Energy expenditure value (cal/s)\"},{\"name\":\"energyExpenditureQuality\",\"type\":\"float\",\"doc\":\"Energy expenditure quality (0-1)\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** device timestamp in UTC (s) */
  @Deprecated public double time;
  /** device receiver timestamp in UTC (s) */
  @Deprecated public double timeReceived;
  /** Energy expenditure value (cal/s) */
  @Deprecated public float energyExpenditure;
  /** Energy expenditure quality (0-1) */
  @Deprecated public float energyExpenditureQuality;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public BiovotionVSMEnergy() {}

  /**
   * All-args constructor.
   * @param time device timestamp in UTC (s)
   * @param timeReceived device receiver timestamp in UTC (s)
   * @param energyExpenditure Energy expenditure value (cal/s)
   * @param energyExpenditureQuality Energy expenditure quality (0-1)
   */
  public BiovotionVSMEnergy(java.lang.Double time, java.lang.Double timeReceived, java.lang.Float energyExpenditure, java.lang.Float energyExpenditureQuality) {
    this.time = time;
    this.timeReceived = timeReceived;
    this.energyExpenditure = energyExpenditure;
    this.energyExpenditureQuality = energyExpenditureQuality;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return time;
    case 1: return timeReceived;
    case 2: return energyExpenditure;
    case 3: return energyExpenditureQuality;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: time = (java.lang.Double)value$; break;
    case 1: timeReceived = (java.lang.Double)value$; break;
    case 2: energyExpenditure = (java.lang.Float)value$; break;
    case 3: energyExpenditureQuality = (java.lang.Float)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'time' field.
   * @return device timestamp in UTC (s)
   */
  public java.lang.Double getTime() {
    return time;
  }

  /**
   * Sets the value of the 'time' field.
   * device timestamp in UTC (s)
   * @param value the value to set.
   */
  public void setTime(java.lang.Double value) {
    this.time = value;
  }

  /**
   * Gets the value of the 'timeReceived' field.
   * @return device receiver timestamp in UTC (s)
   */
  public java.lang.Double getTimeReceived() {
    return timeReceived;
  }

  /**
   * Sets the value of the 'timeReceived' field.
   * device receiver timestamp in UTC (s)
   * @param value the value to set.
   */
  public void setTimeReceived(java.lang.Double value) {
    this.timeReceived = value;
  }

  /**
   * Gets the value of the 'energyExpenditure' field.
   * @return Energy expenditure value (cal/s)
   */
  public java.lang.Float getEnergyExpenditure() {
    return energyExpenditure;
  }

  /**
   * Sets the value of the 'energyExpenditure' field.
   * Energy expenditure value (cal/s)
   * @param value the value to set.
   */
  public void setEnergyExpenditure(java.lang.Float value) {
    this.energyExpenditure = value;
  }

  /**
   * Gets the value of the 'energyExpenditureQuality' field.
   * @return Energy expenditure quality (0-1)
   */
  public java.lang.Float getEnergyExpenditureQuality() {
    return energyExpenditureQuality;
  }

  /**
   * Sets the value of the 'energyExpenditureQuality' field.
   * Energy expenditure quality (0-1)
   * @param value the value to set.
   */
  public void setEnergyExpenditureQuality(java.lang.Float value) {
    this.energyExpenditureQuality = value;
  }

  /**
   * Creates a new BiovotionVSMEnergy RecordBuilder.
   * @return A new BiovotionVSMEnergy RecordBuilder
   */
  public static org.radarcns.biovotion.BiovotionVSMEnergy.Builder newBuilder() {
    return new org.radarcns.biovotion.BiovotionVSMEnergy.Builder();
  }

  /**
   * Creates a new BiovotionVSMEnergy RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new BiovotionVSMEnergy RecordBuilder
   */
  public static org.radarcns.biovotion.BiovotionVSMEnergy.Builder newBuilder(org.radarcns.biovotion.BiovotionVSMEnergy.Builder other) {
    return new org.radarcns.biovotion.BiovotionVSMEnergy.Builder(other);
  }

  /**
   * Creates a new BiovotionVSMEnergy RecordBuilder by copying an existing BiovotionVSMEnergy instance.
   * @param other The existing instance to copy.
   * @return A new BiovotionVSMEnergy RecordBuilder
   */
  public static org.radarcns.biovotion.BiovotionVSMEnergy.Builder newBuilder(org.radarcns.biovotion.BiovotionVSMEnergy other) {
    return new org.radarcns.biovotion.BiovotionVSMEnergy.Builder(other);
  }

  /**
   * RecordBuilder for BiovotionVSMEnergy instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BiovotionVSMEnergy>
    implements org.apache.avro.data.RecordBuilder<BiovotionVSMEnergy> {

    /** device timestamp in UTC (s) */
    private double time;
    /** device receiver timestamp in UTC (s) */
    private double timeReceived;
    /** Energy expenditure value (cal/s) */
    private float energyExpenditure;
    /** Energy expenditure quality (0-1) */
    private float energyExpenditureQuality;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.radarcns.biovotion.BiovotionVSMEnergy.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.time)) {
        this.time = data().deepCopy(fields()[0].schema(), other.time);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timeReceived)) {
        this.timeReceived = data().deepCopy(fields()[1].schema(), other.timeReceived);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.energyExpenditure)) {
        this.energyExpenditure = data().deepCopy(fields()[2].schema(), other.energyExpenditure);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.energyExpenditureQuality)) {
        this.energyExpenditureQuality = data().deepCopy(fields()[3].schema(), other.energyExpenditureQuality);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing BiovotionVSMEnergy instance
     * @param other The existing instance to copy.
     */
    private Builder(org.radarcns.biovotion.BiovotionVSMEnergy other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.time)) {
        this.time = data().deepCopy(fields()[0].schema(), other.time);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timeReceived)) {
        this.timeReceived = data().deepCopy(fields()[1].schema(), other.timeReceived);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.energyExpenditure)) {
        this.energyExpenditure = data().deepCopy(fields()[2].schema(), other.energyExpenditure);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.energyExpenditureQuality)) {
        this.energyExpenditureQuality = data().deepCopy(fields()[3].schema(), other.energyExpenditureQuality);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'time' field.
      * device timestamp in UTC (s)
      * @return The value.
      */
    public java.lang.Double getTime() {
      return time;
    }

    /**
      * Sets the value of the 'time' field.
      * device timestamp in UTC (s)
      * @param value The value of 'time'.
      * @return This builder.
      */
    public org.radarcns.biovotion.BiovotionVSMEnergy.Builder setTime(double value) {
      validate(fields()[0], value);
      this.time = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'time' field has been set.
      * device timestamp in UTC (s)
      * @return True if the 'time' field has been set, false otherwise.
      */
    public boolean hasTime() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'time' field.
      * device timestamp in UTC (s)
      * @return This builder.
      */
    public org.radarcns.biovotion.BiovotionVSMEnergy.Builder clearTime() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'timeReceived' field.
      * device receiver timestamp in UTC (s)
      * @return The value.
      */
    public java.lang.Double getTimeReceived() {
      return timeReceived;
    }

    /**
      * Sets the value of the 'timeReceived' field.
      * device receiver timestamp in UTC (s)
      * @param value The value of 'timeReceived'.
      * @return This builder.
      */
    public org.radarcns.biovotion.BiovotionVSMEnergy.Builder setTimeReceived(double value) {
      validate(fields()[1], value);
      this.timeReceived = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'timeReceived' field has been set.
      * device receiver timestamp in UTC (s)
      * @return True if the 'timeReceived' field has been set, false otherwise.
      */
    public boolean hasTimeReceived() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'timeReceived' field.
      * device receiver timestamp in UTC (s)
      * @return This builder.
      */
    public org.radarcns.biovotion.BiovotionVSMEnergy.Builder clearTimeReceived() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'energyExpenditure' field.
      * Energy expenditure value (cal/s)
      * @return The value.
      */
    public java.lang.Float getEnergyExpenditure() {
      return energyExpenditure;
    }

    /**
      * Sets the value of the 'energyExpenditure' field.
      * Energy expenditure value (cal/s)
      * @param value The value of 'energyExpenditure'.
      * @return This builder.
      */
    public org.radarcns.biovotion.BiovotionVSMEnergy.Builder setEnergyExpenditure(float value) {
      validate(fields()[2], value);
      this.energyExpenditure = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'energyExpenditure' field has been set.
      * Energy expenditure value (cal/s)
      * @return True if the 'energyExpenditure' field has been set, false otherwise.
      */
    public boolean hasEnergyExpenditure() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'energyExpenditure' field.
      * Energy expenditure value (cal/s)
      * @return This builder.
      */
    public org.radarcns.biovotion.BiovotionVSMEnergy.Builder clearEnergyExpenditure() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'energyExpenditureQuality' field.
      * Energy expenditure quality (0-1)
      * @return The value.
      */
    public java.lang.Float getEnergyExpenditureQuality() {
      return energyExpenditureQuality;
    }

    /**
      * Sets the value of the 'energyExpenditureQuality' field.
      * Energy expenditure quality (0-1)
      * @param value The value of 'energyExpenditureQuality'.
      * @return This builder.
      */
    public org.radarcns.biovotion.BiovotionVSMEnergy.Builder setEnergyExpenditureQuality(float value) {
      validate(fields()[3], value);
      this.energyExpenditureQuality = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'energyExpenditureQuality' field has been set.
      * Energy expenditure quality (0-1)
      * @return True if the 'energyExpenditureQuality' field has been set, false otherwise.
      */
    public boolean hasEnergyExpenditureQuality() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'energyExpenditureQuality' field.
      * Energy expenditure quality (0-1)
      * @return This builder.
      */
    public org.radarcns.biovotion.BiovotionVSMEnergy.Builder clearEnergyExpenditureQuality() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public BiovotionVSMEnergy build() {
      try {
        BiovotionVSMEnergy record = new BiovotionVSMEnergy();
        record.time = fieldSetFlags()[0] ? this.time : (java.lang.Double) defaultValue(fields()[0]);
        record.timeReceived = fieldSetFlags()[1] ? this.timeReceived : (java.lang.Double) defaultValue(fields()[1]);
        record.energyExpenditure = fieldSetFlags()[2] ? this.energyExpenditure : (java.lang.Float) defaultValue(fields()[2]);
        record.energyExpenditureQuality = fieldSetFlags()[3] ? this.energyExpenditureQuality : (java.lang.Float) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
