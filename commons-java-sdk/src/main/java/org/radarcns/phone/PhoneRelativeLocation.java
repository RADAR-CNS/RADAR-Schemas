/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.radarcns.phone;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** Data from the gps and network location providers. The latitude and longitude are stated with an unspecified reference offset and can thus be treated as relative locations. They cannot be used to infer absolute location. This means accurate distances or angles between locations cannot be calculated since those depend on the absolute location. */
@org.apache.avro.specific.AvroGenerated
public class PhoneRelativeLocation extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2993860968780350684L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PhoneRelativeLocation\",\"namespace\":\"org.radarcns.phone\",\"doc\":\"Data from the gps and network location providers. The latitude and longitude are stated with an unspecified reference offset and can thus be treated as relative locations. They cannot be used to infer absolute location. This means accurate distances or angles between locations cannot be calculated since those depend on the absolute location.\",\"fields\":[{\"name\":\"time\",\"type\":\"double\",\"doc\":\"device timestamp in UTC (s)\"},{\"name\":\"timeReceived\",\"type\":\"double\",\"doc\":\"device receiver timestamp in UTC (s)\"},{\"name\":\"provider\",\"type\":{\"type\":\"enum\",\"name\":\"LocationProvider\",\"symbols\":[\"GPS\",\"NETWORK\",\"OTHER\"]},\"doc\":\"Android provider of the location data\"},{\"name\":\"latitude\",\"type\":\"double\",\"doc\":\"relative latitude from an initial random reference latitude (degrees with range [-90, 90])\",\"default\":\"NaN\"},{\"name\":\"longitude\",\"type\":\"double\",\"doc\":\"relative longitude from an initial reference longitude (degrees with range [-180, 180])\",\"default\":\"NaN\"},{\"name\":\"altitude\",\"type\":\"float\",\"doc\":\"height above the WGS 84 reference ellipsoid (m)\",\"default\":\"NaN\"},{\"name\":\"accuracy\",\"type\":\"float\",\"doc\":\"The estimated horizontal accuracy of this location, radial (m). We define horizontal accuracy as the radius of 68% confidence. In other words, if you draw a circle centered at this location's latitude and longitude, and with a radius equal to the accuracy, then there is a 68% probability that the true location is inside the circle.\",\"default\":\"NaN\"},{\"name\":\"speed\",\"type\":\"float\",\"doc\":\"speed over ground (m/s)\",\"default\":\"NaN\"},{\"name\":\"bearing\",\"type\":\"float\",\"doc\":\"the horizontal direction of travel of this device (degrees with range (0, 360])\",\"default\":\"NaN\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** device timestamp in UTC (s) */
  @Deprecated public double time;
  /** device receiver timestamp in UTC (s) */
  @Deprecated public double timeReceived;
  /** Android provider of the location data */
  @Deprecated public org.radarcns.phone.LocationProvider provider;
  /** relative latitude from an initial random reference latitude (degrees with range [-90, 90]) */
  @Deprecated public double latitude;
  /** relative longitude from an initial reference longitude (degrees with range [-180, 180]) */
  @Deprecated public double longitude;
  /** height above the WGS 84 reference ellipsoid (m) */
  @Deprecated public float altitude;
  /** The estimated horizontal accuracy of this location, radial (m). We define horizontal accuracy as the radius of 68% confidence. In other words, if you draw a circle centered at this location's latitude and longitude, and with a radius equal to the accuracy, then there is a 68% probability that the true location is inside the circle. */
  @Deprecated public float accuracy;
  /** speed over ground (m/s) */
  @Deprecated public float speed;
  /** the horizontal direction of travel of this device (degrees with range (0, 360]) */
  @Deprecated public float bearing;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PhoneRelativeLocation() {}

  /**
   * All-args constructor.
   * @param time device timestamp in UTC (s)
   * @param timeReceived device receiver timestamp in UTC (s)
   * @param provider Android provider of the location data
   * @param latitude relative latitude from an initial random reference latitude (degrees with range [-90, 90])
   * @param longitude relative longitude from an initial reference longitude (degrees with range [-180, 180])
   * @param altitude height above the WGS 84 reference ellipsoid (m)
   * @param accuracy The estimated horizontal accuracy of this location, radial (m). We define horizontal accuracy as the radius of 68% confidence. In other words, if you draw a circle centered at this location's latitude and longitude, and with a radius equal to the accuracy, then there is a 68% probability that the true location is inside the circle.
   * @param speed speed over ground (m/s)
   * @param bearing the horizontal direction of travel of this device (degrees with range (0, 360])
   */
  public PhoneRelativeLocation(java.lang.Double time, java.lang.Double timeReceived, org.radarcns.phone.LocationProvider provider, java.lang.Double latitude, java.lang.Double longitude, java.lang.Float altitude, java.lang.Float accuracy, java.lang.Float speed, java.lang.Float bearing) {
    this.time = time;
    this.timeReceived = timeReceived;
    this.provider = provider;
    this.latitude = latitude;
    this.longitude = longitude;
    this.altitude = altitude;
    this.accuracy = accuracy;
    this.speed = speed;
    this.bearing = bearing;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return time;
    case 1: return timeReceived;
    case 2: return provider;
    case 3: return latitude;
    case 4: return longitude;
    case 5: return altitude;
    case 6: return accuracy;
    case 7: return speed;
    case 8: return bearing;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: time = (java.lang.Double)value$; break;
    case 1: timeReceived = (java.lang.Double)value$; break;
    case 2: provider = (org.radarcns.phone.LocationProvider)value$; break;
    case 3: latitude = (java.lang.Double)value$; break;
    case 4: longitude = (java.lang.Double)value$; break;
    case 5: altitude = (java.lang.Float)value$; break;
    case 6: accuracy = (java.lang.Float)value$; break;
    case 7: speed = (java.lang.Float)value$; break;
    case 8: bearing = (java.lang.Float)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'time' field.
   * @return device timestamp in UTC (s)
   */
  public java.lang.Double getTime() {
    return time;
  }

  /**
   * Sets the value of the 'time' field.
   * device timestamp in UTC (s)
   * @param value the value to set.
   */
  public void setTime(java.lang.Double value) {
    this.time = value;
  }

  /**
   * Gets the value of the 'timeReceived' field.
   * @return device receiver timestamp in UTC (s)
   */
  public java.lang.Double getTimeReceived() {
    return timeReceived;
  }

  /**
   * Sets the value of the 'timeReceived' field.
   * device receiver timestamp in UTC (s)
   * @param value the value to set.
   */
  public void setTimeReceived(java.lang.Double value) {
    this.timeReceived = value;
  }

  /**
   * Gets the value of the 'provider' field.
   * @return Android provider of the location data
   */
  public org.radarcns.phone.LocationProvider getProvider() {
    return provider;
  }

  /**
   * Sets the value of the 'provider' field.
   * Android provider of the location data
   * @param value the value to set.
   */
  public void setProvider(org.radarcns.phone.LocationProvider value) {
    this.provider = value;
  }

  /**
   * Gets the value of the 'latitude' field.
   * @return relative latitude from an initial random reference latitude (degrees with range [-90, 90])
   */
  public java.lang.Double getLatitude() {
    return latitude;
  }

  /**
   * Sets the value of the 'latitude' field.
   * relative latitude from an initial random reference latitude (degrees with range [-90, 90])
   * @param value the value to set.
   */
  public void setLatitude(java.lang.Double value) {
    this.latitude = value;
  }

  /**
   * Gets the value of the 'longitude' field.
   * @return relative longitude from an initial reference longitude (degrees with range [-180, 180])
   */
  public java.lang.Double getLongitude() {
    return longitude;
  }

  /**
   * Sets the value of the 'longitude' field.
   * relative longitude from an initial reference longitude (degrees with range [-180, 180])
   * @param value the value to set.
   */
  public void setLongitude(java.lang.Double value) {
    this.longitude = value;
  }

  /**
   * Gets the value of the 'altitude' field.
   * @return height above the WGS 84 reference ellipsoid (m)
   */
  public java.lang.Float getAltitude() {
    return altitude;
  }

  /**
   * Sets the value of the 'altitude' field.
   * height above the WGS 84 reference ellipsoid (m)
   * @param value the value to set.
   */
  public void setAltitude(java.lang.Float value) {
    this.altitude = value;
  }

  /**
   * Gets the value of the 'accuracy' field.
   * @return The estimated horizontal accuracy of this location, radial (m). We define horizontal accuracy as the radius of 68% confidence. In other words, if you draw a circle centered at this location's latitude and longitude, and with a radius equal to the accuracy, then there is a 68% probability that the true location is inside the circle.
   */
  public java.lang.Float getAccuracy() {
    return accuracy;
  }

  /**
   * Sets the value of the 'accuracy' field.
   * The estimated horizontal accuracy of this location, radial (m). We define horizontal accuracy as the radius of 68% confidence. In other words, if you draw a circle centered at this location's latitude and longitude, and with a radius equal to the accuracy, then there is a 68% probability that the true location is inside the circle.
   * @param value the value to set.
   */
  public void setAccuracy(java.lang.Float value) {
    this.accuracy = value;
  }

  /**
   * Gets the value of the 'speed' field.
   * @return speed over ground (m/s)
   */
  public java.lang.Float getSpeed() {
    return speed;
  }

  /**
   * Sets the value of the 'speed' field.
   * speed over ground (m/s)
   * @param value the value to set.
   */
  public void setSpeed(java.lang.Float value) {
    this.speed = value;
  }

  /**
   * Gets the value of the 'bearing' field.
   * @return the horizontal direction of travel of this device (degrees with range (0, 360])
   */
  public java.lang.Float getBearing() {
    return bearing;
  }

  /**
   * Sets the value of the 'bearing' field.
   * the horizontal direction of travel of this device (degrees with range (0, 360])
   * @param value the value to set.
   */
  public void setBearing(java.lang.Float value) {
    this.bearing = value;
  }

  /**
   * Creates a new PhoneRelativeLocation RecordBuilder.
   * @return A new PhoneRelativeLocation RecordBuilder
   */
  public static org.radarcns.phone.PhoneRelativeLocation.Builder newBuilder() {
    return new org.radarcns.phone.PhoneRelativeLocation.Builder();
  }

  /**
   * Creates a new PhoneRelativeLocation RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PhoneRelativeLocation RecordBuilder
   */
  public static org.radarcns.phone.PhoneRelativeLocation.Builder newBuilder(org.radarcns.phone.PhoneRelativeLocation.Builder other) {
    return new org.radarcns.phone.PhoneRelativeLocation.Builder(other);
  }

  /**
   * Creates a new PhoneRelativeLocation RecordBuilder by copying an existing PhoneRelativeLocation instance.
   * @param other The existing instance to copy.
   * @return A new PhoneRelativeLocation RecordBuilder
   */
  public static org.radarcns.phone.PhoneRelativeLocation.Builder newBuilder(org.radarcns.phone.PhoneRelativeLocation other) {
    return new org.radarcns.phone.PhoneRelativeLocation.Builder(other);
  }

  /**
   * RecordBuilder for PhoneRelativeLocation instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PhoneRelativeLocation>
    implements org.apache.avro.data.RecordBuilder<PhoneRelativeLocation> {

    /** device timestamp in UTC (s) */
    private double time;
    /** device receiver timestamp in UTC (s) */
    private double timeReceived;
    /** Android provider of the location data */
    private org.radarcns.phone.LocationProvider provider;
    /** relative latitude from an initial random reference latitude (degrees with range [-90, 90]) */
    private double latitude;
    /** relative longitude from an initial reference longitude (degrees with range [-180, 180]) */
    private double longitude;
    /** height above the WGS 84 reference ellipsoid (m) */
    private float altitude;
    /** The estimated horizontal accuracy of this location, radial (m). We define horizontal accuracy as the radius of 68% confidence. In other words, if you draw a circle centered at this location's latitude and longitude, and with a radius equal to the accuracy, then there is a 68% probability that the true location is inside the circle. */
    private float accuracy;
    /** speed over ground (m/s) */
    private float speed;
    /** the horizontal direction of travel of this device (degrees with range (0, 360]) */
    private float bearing;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.radarcns.phone.PhoneRelativeLocation.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.time)) {
        this.time = data().deepCopy(fields()[0].schema(), other.time);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timeReceived)) {
        this.timeReceived = data().deepCopy(fields()[1].schema(), other.timeReceived);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.provider)) {
        this.provider = data().deepCopy(fields()[2].schema(), other.provider);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.latitude)) {
        this.latitude = data().deepCopy(fields()[3].schema(), other.latitude);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.longitude)) {
        this.longitude = data().deepCopy(fields()[4].schema(), other.longitude);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.altitude)) {
        this.altitude = data().deepCopy(fields()[5].schema(), other.altitude);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.accuracy)) {
        this.accuracy = data().deepCopy(fields()[6].schema(), other.accuracy);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.speed)) {
        this.speed = data().deepCopy(fields()[7].schema(), other.speed);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.bearing)) {
        this.bearing = data().deepCopy(fields()[8].schema(), other.bearing);
        fieldSetFlags()[8] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing PhoneRelativeLocation instance
     * @param other The existing instance to copy.
     */
    private Builder(org.radarcns.phone.PhoneRelativeLocation other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.time)) {
        this.time = data().deepCopy(fields()[0].schema(), other.time);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timeReceived)) {
        this.timeReceived = data().deepCopy(fields()[1].schema(), other.timeReceived);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.provider)) {
        this.provider = data().deepCopy(fields()[2].schema(), other.provider);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.latitude)) {
        this.latitude = data().deepCopy(fields()[3].schema(), other.latitude);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.longitude)) {
        this.longitude = data().deepCopy(fields()[4].schema(), other.longitude);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.altitude)) {
        this.altitude = data().deepCopy(fields()[5].schema(), other.altitude);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.accuracy)) {
        this.accuracy = data().deepCopy(fields()[6].schema(), other.accuracy);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.speed)) {
        this.speed = data().deepCopy(fields()[7].schema(), other.speed);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.bearing)) {
        this.bearing = data().deepCopy(fields()[8].schema(), other.bearing);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'time' field.
      * device timestamp in UTC (s)
      * @return The value.
      */
    public java.lang.Double getTime() {
      return time;
    }

    /**
      * Sets the value of the 'time' field.
      * device timestamp in UTC (s)
      * @param value The value of 'time'.
      * @return This builder.
      */
    public org.radarcns.phone.PhoneRelativeLocation.Builder setTime(double value) {
      validate(fields()[0], value);
      this.time = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'time' field has been set.
      * device timestamp in UTC (s)
      * @return True if the 'time' field has been set, false otherwise.
      */
    public boolean hasTime() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'time' field.
      * device timestamp in UTC (s)
      * @return This builder.
      */
    public org.radarcns.phone.PhoneRelativeLocation.Builder clearTime() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'timeReceived' field.
      * device receiver timestamp in UTC (s)
      * @return The value.
      */
    public java.lang.Double getTimeReceived() {
      return timeReceived;
    }

    /**
      * Sets the value of the 'timeReceived' field.
      * device receiver timestamp in UTC (s)
      * @param value The value of 'timeReceived'.
      * @return This builder.
      */
    public org.radarcns.phone.PhoneRelativeLocation.Builder setTimeReceived(double value) {
      validate(fields()[1], value);
      this.timeReceived = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'timeReceived' field has been set.
      * device receiver timestamp in UTC (s)
      * @return True if the 'timeReceived' field has been set, false otherwise.
      */
    public boolean hasTimeReceived() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'timeReceived' field.
      * device receiver timestamp in UTC (s)
      * @return This builder.
      */
    public org.radarcns.phone.PhoneRelativeLocation.Builder clearTimeReceived() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'provider' field.
      * Android provider of the location data
      * @return The value.
      */
    public org.radarcns.phone.LocationProvider getProvider() {
      return provider;
    }

    /**
      * Sets the value of the 'provider' field.
      * Android provider of the location data
      * @param value The value of 'provider'.
      * @return This builder.
      */
    public org.radarcns.phone.PhoneRelativeLocation.Builder setProvider(org.radarcns.phone.LocationProvider value) {
      validate(fields()[2], value);
      this.provider = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'provider' field has been set.
      * Android provider of the location data
      * @return True if the 'provider' field has been set, false otherwise.
      */
    public boolean hasProvider() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'provider' field.
      * Android provider of the location data
      * @return This builder.
      */
    public org.radarcns.phone.PhoneRelativeLocation.Builder clearProvider() {
      provider = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'latitude' field.
      * relative latitude from an initial random reference latitude (degrees with range [-90, 90])
      * @return The value.
      */
    public java.lang.Double getLatitude() {
      return latitude;
    }

    /**
      * Sets the value of the 'latitude' field.
      * relative latitude from an initial random reference latitude (degrees with range [-90, 90])
      * @param value The value of 'latitude'.
      * @return This builder.
      */
    public org.radarcns.phone.PhoneRelativeLocation.Builder setLatitude(double value) {
      validate(fields()[3], value);
      this.latitude = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'latitude' field has been set.
      * relative latitude from an initial random reference latitude (degrees with range [-90, 90])
      * @return True if the 'latitude' field has been set, false otherwise.
      */
    public boolean hasLatitude() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'latitude' field.
      * relative latitude from an initial random reference latitude (degrees with range [-90, 90])
      * @return This builder.
      */
    public org.radarcns.phone.PhoneRelativeLocation.Builder clearLatitude() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'longitude' field.
      * relative longitude from an initial reference longitude (degrees with range [-180, 180])
      * @return The value.
      */
    public java.lang.Double getLongitude() {
      return longitude;
    }

    /**
      * Sets the value of the 'longitude' field.
      * relative longitude from an initial reference longitude (degrees with range [-180, 180])
      * @param value The value of 'longitude'.
      * @return This builder.
      */
    public org.radarcns.phone.PhoneRelativeLocation.Builder setLongitude(double value) {
      validate(fields()[4], value);
      this.longitude = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'longitude' field has been set.
      * relative longitude from an initial reference longitude (degrees with range [-180, 180])
      * @return True if the 'longitude' field has been set, false otherwise.
      */
    public boolean hasLongitude() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'longitude' field.
      * relative longitude from an initial reference longitude (degrees with range [-180, 180])
      * @return This builder.
      */
    public org.radarcns.phone.PhoneRelativeLocation.Builder clearLongitude() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'altitude' field.
      * height above the WGS 84 reference ellipsoid (m)
      * @return The value.
      */
    public java.lang.Float getAltitude() {
      return altitude;
    }

    /**
      * Sets the value of the 'altitude' field.
      * height above the WGS 84 reference ellipsoid (m)
      * @param value The value of 'altitude'.
      * @return This builder.
      */
    public org.radarcns.phone.PhoneRelativeLocation.Builder setAltitude(float value) {
      validate(fields()[5], value);
      this.altitude = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'altitude' field has been set.
      * height above the WGS 84 reference ellipsoid (m)
      * @return True if the 'altitude' field has been set, false otherwise.
      */
    public boolean hasAltitude() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'altitude' field.
      * height above the WGS 84 reference ellipsoid (m)
      * @return This builder.
      */
    public org.radarcns.phone.PhoneRelativeLocation.Builder clearAltitude() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'accuracy' field.
      * The estimated horizontal accuracy of this location, radial (m). We define horizontal accuracy as the radius of 68% confidence. In other words, if you draw a circle centered at this location's latitude and longitude, and with a radius equal to the accuracy, then there is a 68% probability that the true location is inside the circle.
      * @return The value.
      */
    public java.lang.Float getAccuracy() {
      return accuracy;
    }

    /**
      * Sets the value of the 'accuracy' field.
      * The estimated horizontal accuracy of this location, radial (m). We define horizontal accuracy as the radius of 68% confidence. In other words, if you draw a circle centered at this location's latitude and longitude, and with a radius equal to the accuracy, then there is a 68% probability that the true location is inside the circle.
      * @param value The value of 'accuracy'.
      * @return This builder.
      */
    public org.radarcns.phone.PhoneRelativeLocation.Builder setAccuracy(float value) {
      validate(fields()[6], value);
      this.accuracy = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'accuracy' field has been set.
      * The estimated horizontal accuracy of this location, radial (m). We define horizontal accuracy as the radius of 68% confidence. In other words, if you draw a circle centered at this location's latitude and longitude, and with a radius equal to the accuracy, then there is a 68% probability that the true location is inside the circle.
      * @return True if the 'accuracy' field has been set, false otherwise.
      */
    public boolean hasAccuracy() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'accuracy' field.
      * The estimated horizontal accuracy of this location, radial (m). We define horizontal accuracy as the radius of 68% confidence. In other words, if you draw a circle centered at this location's latitude and longitude, and with a radius equal to the accuracy, then there is a 68% probability that the true location is inside the circle.
      * @return This builder.
      */
    public org.radarcns.phone.PhoneRelativeLocation.Builder clearAccuracy() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'speed' field.
      * speed over ground (m/s)
      * @return The value.
      */
    public java.lang.Float getSpeed() {
      return speed;
    }

    /**
      * Sets the value of the 'speed' field.
      * speed over ground (m/s)
      * @param value The value of 'speed'.
      * @return This builder.
      */
    public org.radarcns.phone.PhoneRelativeLocation.Builder setSpeed(float value) {
      validate(fields()[7], value);
      this.speed = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'speed' field has been set.
      * speed over ground (m/s)
      * @return True if the 'speed' field has been set, false otherwise.
      */
    public boolean hasSpeed() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'speed' field.
      * speed over ground (m/s)
      * @return This builder.
      */
    public org.radarcns.phone.PhoneRelativeLocation.Builder clearSpeed() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'bearing' field.
      * the horizontal direction of travel of this device (degrees with range (0, 360])
      * @return The value.
      */
    public java.lang.Float getBearing() {
      return bearing;
    }

    /**
      * Sets the value of the 'bearing' field.
      * the horizontal direction of travel of this device (degrees with range (0, 360])
      * @param value The value of 'bearing'.
      * @return This builder.
      */
    public org.radarcns.phone.PhoneRelativeLocation.Builder setBearing(float value) {
      validate(fields()[8], value);
      this.bearing = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'bearing' field has been set.
      * the horizontal direction of travel of this device (degrees with range (0, 360])
      * @return True if the 'bearing' field has been set, false otherwise.
      */
    public boolean hasBearing() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'bearing' field.
      * the horizontal direction of travel of this device (degrees with range (0, 360])
      * @return This builder.
      */
    public org.radarcns.phone.PhoneRelativeLocation.Builder clearBearing() {
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    public PhoneRelativeLocation build() {
      try {
        PhoneRelativeLocation record = new PhoneRelativeLocation();
        record.time = fieldSetFlags()[0] ? this.time : (java.lang.Double) defaultValue(fields()[0]);
        record.timeReceived = fieldSetFlags()[1] ? this.timeReceived : (java.lang.Double) defaultValue(fields()[1]);
        record.provider = fieldSetFlags()[2] ? this.provider : (org.radarcns.phone.LocationProvider) defaultValue(fields()[2]);
        record.latitude = fieldSetFlags()[3] ? this.latitude : (java.lang.Double) defaultValue(fields()[3]);
        record.longitude = fieldSetFlags()[4] ? this.longitude : (java.lang.Double) defaultValue(fields()[4]);
        record.altitude = fieldSetFlags()[5] ? this.altitude : (java.lang.Float) defaultValue(fields()[5]);
        record.accuracy = fieldSetFlags()[6] ? this.accuracy : (java.lang.Float) defaultValue(fields()[6]);
        record.speed = fieldSetFlags()[7] ? this.speed : (java.lang.Float) defaultValue(fields()[7]);
        record.bearing = fieldSetFlags()[8] ? this.bearing : (java.lang.Float) defaultValue(fields()[8]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
