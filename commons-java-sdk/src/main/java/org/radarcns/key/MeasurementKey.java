/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.radarcns.key;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** Measurement key in the RADAR-CNS project */
@org.apache.avro.specific.AvroGenerated
public class MeasurementKey extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3749094062552075317L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MeasurementKey\",\"namespace\":\"org.radarcns.key\",\"doc\":\"Measurement key in the RADAR-CNS project\",\"fields\":[{\"name\":\"userId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"user ID\"},{\"name\":\"sourceId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"device source ID\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** user ID */
  @Deprecated public java.lang.String userId;
  /** device source ID */
  @Deprecated public java.lang.String sourceId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MeasurementKey() {}

  /**
   * All-args constructor.
   * @param userId user ID
   * @param sourceId device source ID
   */
  public MeasurementKey(java.lang.String userId, java.lang.String sourceId) {
    this.userId = userId;
    this.sourceId = sourceId;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return userId;
    case 1: return sourceId;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: userId = (java.lang.String)value$; break;
    case 1: sourceId = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'userId' field.
   * @return user ID
   */
  public java.lang.String getUserId() {
    return userId;
  }

  /**
   * Sets the value of the 'userId' field.
   * user ID
   * @param value the value to set.
   */
  public void setUserId(java.lang.String value) {
    this.userId = value;
  }

  /**
   * Gets the value of the 'sourceId' field.
   * @return device source ID
   */
  public java.lang.String getSourceId() {
    return sourceId;
  }

  /**
   * Sets the value of the 'sourceId' field.
   * device source ID
   * @param value the value to set.
   */
  public void setSourceId(java.lang.String value) {
    this.sourceId = value;
  }

  /**
   * Creates a new MeasurementKey RecordBuilder.
   * @return A new MeasurementKey RecordBuilder
   */
  public static org.radarcns.key.MeasurementKey.Builder newBuilder() {
    return new org.radarcns.key.MeasurementKey.Builder();
  }

  /**
   * Creates a new MeasurementKey RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MeasurementKey RecordBuilder
   */
  public static org.radarcns.key.MeasurementKey.Builder newBuilder(org.radarcns.key.MeasurementKey.Builder other) {
    return new org.radarcns.key.MeasurementKey.Builder(other);
  }

  /**
   * Creates a new MeasurementKey RecordBuilder by copying an existing MeasurementKey instance.
   * @param other The existing instance to copy.
   * @return A new MeasurementKey RecordBuilder
   */
  public static org.radarcns.key.MeasurementKey.Builder newBuilder(org.radarcns.key.MeasurementKey other) {
    return new org.radarcns.key.MeasurementKey.Builder(other);
  }

  /**
   * RecordBuilder for MeasurementKey instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MeasurementKey>
    implements org.apache.avro.data.RecordBuilder<MeasurementKey> {

    /** user ID */
    private java.lang.String userId;
    /** device source ID */
    private java.lang.String sourceId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.radarcns.key.MeasurementKey.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.userId)) {
        this.userId = data().deepCopy(fields()[0].schema(), other.userId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sourceId)) {
        this.sourceId = data().deepCopy(fields()[1].schema(), other.sourceId);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing MeasurementKey instance
     * @param other The existing instance to copy.
     */
    private Builder(org.radarcns.key.MeasurementKey other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.userId)) {
        this.userId = data().deepCopy(fields()[0].schema(), other.userId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sourceId)) {
        this.sourceId = data().deepCopy(fields()[1].schema(), other.sourceId);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'userId' field.
      * user ID
      * @return The value.
      */
    public java.lang.String getUserId() {
      return userId;
    }

    /**
      * Sets the value of the 'userId' field.
      * user ID
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public org.radarcns.key.MeasurementKey.Builder setUserId(java.lang.String value) {
      validate(fields()[0], value);
      this.userId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * user ID
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'userId' field.
      * user ID
      * @return This builder.
      */
    public org.radarcns.key.MeasurementKey.Builder clearUserId() {
      userId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'sourceId' field.
      * device source ID
      * @return The value.
      */
    public java.lang.String getSourceId() {
      return sourceId;
    }

    /**
      * Sets the value of the 'sourceId' field.
      * device source ID
      * @param value The value of 'sourceId'.
      * @return This builder.
      */
    public org.radarcns.key.MeasurementKey.Builder setSourceId(java.lang.String value) {
      validate(fields()[1], value);
      this.sourceId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'sourceId' field has been set.
      * device source ID
      * @return True if the 'sourceId' field has been set, false otherwise.
      */
    public boolean hasSourceId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'sourceId' field.
      * device source ID
      * @return This builder.
      */
    public org.radarcns.key.MeasurementKey.Builder clearSourceId() {
      sourceId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public MeasurementKey build() {
      try {
        MeasurementKey record = new MeasurementKey();
        record.userId = fieldSetFlags()[0] ? this.userId : (java.lang.String) defaultValue(fields()[0]);
        record.sourceId = fieldSetFlags()[1] ? this.sourceId : (java.lang.String) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
