/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.radarcns.aggregator;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** Result of data aggregation. */
@org.apache.avro.specific.AvroGenerated
public class DoubleArrayAggregator extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7600673931497927290L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DoubleArrayAggregator\",\"namespace\":\"org.radarcns.aggregator\",\"doc\":\"Result of data aggregation.\",\"fields\":[{\"name\":\"min\",\"type\":{\"type\":\"array\",\"items\":\"double\"}},{\"name\":\"max\",\"type\":{\"type\":\"array\",\"items\":\"double\"}},{\"name\":\"sum\",\"type\":{\"type\":\"array\",\"items\":\"double\"}},{\"name\":\"count\",\"type\":{\"type\":\"array\",\"items\":\"double\"}},{\"name\":\"avg\",\"type\":{\"type\":\"array\",\"items\":\"double\"}},{\"name\":\"quartile\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":\"double\"}}},{\"name\":\"iqr\",\"type\":{\"type\":\"array\",\"items\":\"double\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.util.List<java.lang.Double> min;
  @Deprecated public java.util.List<java.lang.Double> max;
  @Deprecated public java.util.List<java.lang.Double> sum;
  @Deprecated public java.util.List<java.lang.Double> count;
  @Deprecated public java.util.List<java.lang.Double> avg;
  @Deprecated public java.util.List<java.util.List<java.lang.Double>> quartile;
  @Deprecated public java.util.List<java.lang.Double> iqr;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DoubleArrayAggregator() {}

  /**
   * All-args constructor.
   * @param min The new value for min
   * @param max The new value for max
   * @param sum The new value for sum
   * @param count The new value for count
   * @param avg The new value for avg
   * @param quartile The new value for quartile
   * @param iqr The new value for iqr
   */
  public DoubleArrayAggregator(java.util.List<java.lang.Double> min, java.util.List<java.lang.Double> max, java.util.List<java.lang.Double> sum, java.util.List<java.lang.Double> count, java.util.List<java.lang.Double> avg, java.util.List<java.util.List<java.lang.Double>> quartile, java.util.List<java.lang.Double> iqr) {
    this.min = min;
    this.max = max;
    this.sum = sum;
    this.count = count;
    this.avg = avg;
    this.quartile = quartile;
    this.iqr = iqr;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return min;
    case 1: return max;
    case 2: return sum;
    case 3: return count;
    case 4: return avg;
    case 5: return quartile;
    case 6: return iqr;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: min = (java.util.List<java.lang.Double>)value$; break;
    case 1: max = (java.util.List<java.lang.Double>)value$; break;
    case 2: sum = (java.util.List<java.lang.Double>)value$; break;
    case 3: count = (java.util.List<java.lang.Double>)value$; break;
    case 4: avg = (java.util.List<java.lang.Double>)value$; break;
    case 5: quartile = (java.util.List<java.util.List<java.lang.Double>>)value$; break;
    case 6: iqr = (java.util.List<java.lang.Double>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'min' field.
   * @return The value of the 'min' field.
   */
  public java.util.List<java.lang.Double> getMin() {
    return min;
  }

  /**
   * Sets the value of the 'min' field.
   * @param value the value to set.
   */
  public void setMin(java.util.List<java.lang.Double> value) {
    this.min = value;
  }

  /**
   * Gets the value of the 'max' field.
   * @return The value of the 'max' field.
   */
  public java.util.List<java.lang.Double> getMax() {
    return max;
  }

  /**
   * Sets the value of the 'max' field.
   * @param value the value to set.
   */
  public void setMax(java.util.List<java.lang.Double> value) {
    this.max = value;
  }

  /**
   * Gets the value of the 'sum' field.
   * @return The value of the 'sum' field.
   */
  public java.util.List<java.lang.Double> getSum() {
    return sum;
  }

  /**
   * Sets the value of the 'sum' field.
   * @param value the value to set.
   */
  public void setSum(java.util.List<java.lang.Double> value) {
    this.sum = value;
  }

  /**
   * Gets the value of the 'count' field.
   * @return The value of the 'count' field.
   */
  public java.util.List<java.lang.Double> getCount() {
    return count;
  }

  /**
   * Sets the value of the 'count' field.
   * @param value the value to set.
   */
  public void setCount(java.util.List<java.lang.Double> value) {
    this.count = value;
  }

  /**
   * Gets the value of the 'avg' field.
   * @return The value of the 'avg' field.
   */
  public java.util.List<java.lang.Double> getAvg() {
    return avg;
  }

  /**
   * Sets the value of the 'avg' field.
   * @param value the value to set.
   */
  public void setAvg(java.util.List<java.lang.Double> value) {
    this.avg = value;
  }

  /**
   * Gets the value of the 'quartile' field.
   * @return The value of the 'quartile' field.
   */
  public java.util.List<java.util.List<java.lang.Double>> getQuartile() {
    return quartile;
  }

  /**
   * Sets the value of the 'quartile' field.
   * @param value the value to set.
   */
  public void setQuartile(java.util.List<java.util.List<java.lang.Double>> value) {
    this.quartile = value;
  }

  /**
   * Gets the value of the 'iqr' field.
   * @return The value of the 'iqr' field.
   */
  public java.util.List<java.lang.Double> getIqr() {
    return iqr;
  }

  /**
   * Sets the value of the 'iqr' field.
   * @param value the value to set.
   */
  public void setIqr(java.util.List<java.lang.Double> value) {
    this.iqr = value;
  }

  /**
   * Creates a new DoubleArrayAggregator RecordBuilder.
   * @return A new DoubleArrayAggregator RecordBuilder
   */
  public static org.radarcns.aggregator.DoubleArrayAggregator.Builder newBuilder() {
    return new org.radarcns.aggregator.DoubleArrayAggregator.Builder();
  }

  /**
   * Creates a new DoubleArrayAggregator RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DoubleArrayAggregator RecordBuilder
   */
  public static org.radarcns.aggregator.DoubleArrayAggregator.Builder newBuilder(org.radarcns.aggregator.DoubleArrayAggregator.Builder other) {
    return new org.radarcns.aggregator.DoubleArrayAggregator.Builder(other);
  }

  /**
   * Creates a new DoubleArrayAggregator RecordBuilder by copying an existing DoubleArrayAggregator instance.
   * @param other The existing instance to copy.
   * @return A new DoubleArrayAggregator RecordBuilder
   */
  public static org.radarcns.aggregator.DoubleArrayAggregator.Builder newBuilder(org.radarcns.aggregator.DoubleArrayAggregator other) {
    return new org.radarcns.aggregator.DoubleArrayAggregator.Builder(other);
  }

  /**
   * RecordBuilder for DoubleArrayAggregator instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DoubleArrayAggregator>
    implements org.apache.avro.data.RecordBuilder<DoubleArrayAggregator> {

    private java.util.List<java.lang.Double> min;
    private java.util.List<java.lang.Double> max;
    private java.util.List<java.lang.Double> sum;
    private java.util.List<java.lang.Double> count;
    private java.util.List<java.lang.Double> avg;
    private java.util.List<java.util.List<java.lang.Double>> quartile;
    private java.util.List<java.lang.Double> iqr;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.radarcns.aggregator.DoubleArrayAggregator.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.min)) {
        this.min = data().deepCopy(fields()[0].schema(), other.min);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.max)) {
        this.max = data().deepCopy(fields()[1].schema(), other.max);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sum)) {
        this.sum = data().deepCopy(fields()[2].schema(), other.sum);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.count)) {
        this.count = data().deepCopy(fields()[3].schema(), other.count);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.avg)) {
        this.avg = data().deepCopy(fields()[4].schema(), other.avg);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.quartile)) {
        this.quartile = data().deepCopy(fields()[5].schema(), other.quartile);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.iqr)) {
        this.iqr = data().deepCopy(fields()[6].schema(), other.iqr);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing DoubleArrayAggregator instance
     * @param other The existing instance to copy.
     */
    private Builder(org.radarcns.aggregator.DoubleArrayAggregator other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.min)) {
        this.min = data().deepCopy(fields()[0].schema(), other.min);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.max)) {
        this.max = data().deepCopy(fields()[1].schema(), other.max);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sum)) {
        this.sum = data().deepCopy(fields()[2].schema(), other.sum);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.count)) {
        this.count = data().deepCopy(fields()[3].schema(), other.count);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.avg)) {
        this.avg = data().deepCopy(fields()[4].schema(), other.avg);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.quartile)) {
        this.quartile = data().deepCopy(fields()[5].schema(), other.quartile);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.iqr)) {
        this.iqr = data().deepCopy(fields()[6].schema(), other.iqr);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'min' field.
      * @return The value.
      */
    public java.util.List<java.lang.Double> getMin() {
      return min;
    }

    /**
      * Sets the value of the 'min' field.
      * @param value The value of 'min'.
      * @return This builder.
      */
    public org.radarcns.aggregator.DoubleArrayAggregator.Builder setMin(java.util.List<java.lang.Double> value) {
      validate(fields()[0], value);
      this.min = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'min' field has been set.
      * @return True if the 'min' field has been set, false otherwise.
      */
    public boolean hasMin() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'min' field.
      * @return This builder.
      */
    public org.radarcns.aggregator.DoubleArrayAggregator.Builder clearMin() {
      min = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'max' field.
      * @return The value.
      */
    public java.util.List<java.lang.Double> getMax() {
      return max;
    }

    /**
      * Sets the value of the 'max' field.
      * @param value The value of 'max'.
      * @return This builder.
      */
    public org.radarcns.aggregator.DoubleArrayAggregator.Builder setMax(java.util.List<java.lang.Double> value) {
      validate(fields()[1], value);
      this.max = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'max' field has been set.
      * @return True if the 'max' field has been set, false otherwise.
      */
    public boolean hasMax() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'max' field.
      * @return This builder.
      */
    public org.radarcns.aggregator.DoubleArrayAggregator.Builder clearMax() {
      max = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'sum' field.
      * @return The value.
      */
    public java.util.List<java.lang.Double> getSum() {
      return sum;
    }

    /**
      * Sets the value of the 'sum' field.
      * @param value The value of 'sum'.
      * @return This builder.
      */
    public org.radarcns.aggregator.DoubleArrayAggregator.Builder setSum(java.util.List<java.lang.Double> value) {
      validate(fields()[2], value);
      this.sum = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'sum' field has been set.
      * @return True if the 'sum' field has been set, false otherwise.
      */
    public boolean hasSum() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'sum' field.
      * @return This builder.
      */
    public org.radarcns.aggregator.DoubleArrayAggregator.Builder clearSum() {
      sum = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'count' field.
      * @return The value.
      */
    public java.util.List<java.lang.Double> getCount() {
      return count;
    }

    /**
      * Sets the value of the 'count' field.
      * @param value The value of 'count'.
      * @return This builder.
      */
    public org.radarcns.aggregator.DoubleArrayAggregator.Builder setCount(java.util.List<java.lang.Double> value) {
      validate(fields()[3], value);
      this.count = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'count' field has been set.
      * @return True if the 'count' field has been set, false otherwise.
      */
    public boolean hasCount() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'count' field.
      * @return This builder.
      */
    public org.radarcns.aggregator.DoubleArrayAggregator.Builder clearCount() {
      count = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'avg' field.
      * @return The value.
      */
    public java.util.List<java.lang.Double> getAvg() {
      return avg;
    }

    /**
      * Sets the value of the 'avg' field.
      * @param value The value of 'avg'.
      * @return This builder.
      */
    public org.radarcns.aggregator.DoubleArrayAggregator.Builder setAvg(java.util.List<java.lang.Double> value) {
      validate(fields()[4], value);
      this.avg = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'avg' field has been set.
      * @return True if the 'avg' field has been set, false otherwise.
      */
    public boolean hasAvg() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'avg' field.
      * @return This builder.
      */
    public org.radarcns.aggregator.DoubleArrayAggregator.Builder clearAvg() {
      avg = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'quartile' field.
      * @return The value.
      */
    public java.util.List<java.util.List<java.lang.Double>> getQuartile() {
      return quartile;
    }

    /**
      * Sets the value of the 'quartile' field.
      * @param value The value of 'quartile'.
      * @return This builder.
      */
    public org.radarcns.aggregator.DoubleArrayAggregator.Builder setQuartile(java.util.List<java.util.List<java.lang.Double>> value) {
      validate(fields()[5], value);
      this.quartile = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'quartile' field has been set.
      * @return True if the 'quartile' field has been set, false otherwise.
      */
    public boolean hasQuartile() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'quartile' field.
      * @return This builder.
      */
    public org.radarcns.aggregator.DoubleArrayAggregator.Builder clearQuartile() {
      quartile = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'iqr' field.
      * @return The value.
      */
    public java.util.List<java.lang.Double> getIqr() {
      return iqr;
    }

    /**
      * Sets the value of the 'iqr' field.
      * @param value The value of 'iqr'.
      * @return This builder.
      */
    public org.radarcns.aggregator.DoubleArrayAggregator.Builder setIqr(java.util.List<java.lang.Double> value) {
      validate(fields()[6], value);
      this.iqr = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'iqr' field has been set.
      * @return True if the 'iqr' field has been set, false otherwise.
      */
    public boolean hasIqr() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'iqr' field.
      * @return This builder.
      */
    public org.radarcns.aggregator.DoubleArrayAggregator.Builder clearIqr() {
      iqr = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public DoubleArrayAggregator build() {
      try {
        DoubleArrayAggregator record = new DoubleArrayAggregator();
        record.min = fieldSetFlags()[0] ? this.min : (java.util.List<java.lang.Double>) defaultValue(fields()[0]);
        record.max = fieldSetFlags()[1] ? this.max : (java.util.List<java.lang.Double>) defaultValue(fields()[1]);
        record.sum = fieldSetFlags()[2] ? this.sum : (java.util.List<java.lang.Double>) defaultValue(fields()[2]);
        record.count = fieldSetFlags()[3] ? this.count : (java.util.List<java.lang.Double>) defaultValue(fields()[3]);
        record.avg = fieldSetFlags()[4] ? this.avg : (java.util.List<java.lang.Double>) defaultValue(fields()[4]);
        record.quartile = fieldSetFlags()[5] ? this.quartile : (java.util.List<java.util.List<java.lang.Double>>) defaultValue(fields()[5]);
        record.iqr = fieldSetFlags()[6] ? this.iqr : (java.util.List<java.lang.Double>) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
